declare module "zstd-codec";
import { decompress, Decompress } from "fzstd";
import fs from "fs";
import { ZstdCodec } from "zstd-codec";

export const hexDump1_0 = `
0x28, 0xb5, 0x2f, 0xfd, 0x00, 0x58, 0xd4, 0x2d, 0x00, 0xaa, 0x57, 0x30, 0x10, 0x33, 0x20, 0x6d, 0x9b, 0x07, 0x24, 0xba, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x8c, 0x52, 0xf8, 0xa8, 0xe0, 0x84, 0xa9, 0xbb, 0xa7, 0x12, 0x6f, 0x34, 0x41, 0x9f, 0xc7, 0xc5, 0x0a, 0x0f, 0xaf, 0xf0, 0x55, 0xe8, 0x5f, 0xc9, 0xba, 0x88, 0x91, 0x22, 0x96, 0x29, 0xb0, 0xfe, 0xcd, 0x6c, 0x05, 0x11, 0x84, 0x85, 0x54, 0x57, 0xf9, 0x00, 0xf6, 0x00, 0xf1, 0x00, 0x8c, 0x94, 0x1e, 0x19, 0x6c, 0x8f, 0x41, 0x07, 0xbe, 0x7b, 0xf8, 0x10, 0xb6, 0xd7, 0x9c, 0x7b, 0x86, 0x39, 0x8c, 0x03, 0x9f, 0x69, 0xf2, 0x3d, 0x3a, 0xd0, 0xc9, 0x6f, 0xed, 0x41, 0xf9, 0xb0, 0xc5, 0x77, 0xe8, 0xae, 0x0a, 0xb9, 0xaa, 0x6c, 0x4b, 0x39, 0xcb, 0x96, 0xb2, 0x13, 0xdf, 0xba, 0xb2, 0x70, 0x7c, 0xd9, 0xfe, 0x9c, 0xe6, 0x35, 0xce, 0x9a, 0xc6, 0x34, 0x86, 0x31, 0xec, 0xbd, 0x69, 0x8d, 0xc1, 0xd6, 0xda, 0x37, 0xc7, 0x10, 0xc5, 0xdf, 0x1f, 0x74, 0xdc, 0x7b, 0x0f, 0x36, 0x6d, 0xda, 0x4d, 0xa1, 0x0b, 0x51, 0xb4, 0x4a, 0x86, 0x31, 0x90, 0x35, 0x06, 0xc2, 0xa7, 0x32, 0x1a, 0x92, 0xa5, 0x28, 0x6a, 0x51, 0xe9, 0xa6, 0xd0, 0xaa, 0x3b, 0x57, 0xd8, 0x8a, 0x4b, 0x28, 0x20, 0x13, 0x8e, 0x89, 0x04, 0x14, 0x11, 0x87, 0x24, 0xf2, 0xc0, 0x5f, 0x8b, 0xef, 0x9d, 0xaa, 0xee, 0xa6, 0xf5, 0x4a, 0x18, 0xd3, 0x67, 0x62, 0x34, 0x26, 0x14, 0x44, 0xf0, 0x59, 0xef, 0xa6, 0xe8, 0x64, 0xf5, 0x82, 0xae, 0x9e, 0x1e, 0xca, 0x68, 0x40, 0xd6, 0x72, 0xa7, 0x55, 0xa9, 0x24, 0x89, 0x2e, 0x4c, 0xa7, 0x6d, 0xb1, 0x0f, 0x65, 0x34, 0x9a, 0xbf, 0x33, 0x8f, 0x48, 0x10, 0x59, 0xf0, 0xa0, 0xc0, 0xc4, 0x94, 0x2a, 0x4f, 0x1e, 0xca, 0x68, 0x30, 0x67, 0xcf, 0x66, 0x34, 0xd6, 0xa3, 0x19, 0x8d, 0x67, 0x18, 0xc3, 0x98, 0xd8, 0xde, 0x9d, 0x04, 0x81, 0x2f, 0x40, 0xe0, 0x8d, 0x47, 0xf7, 0x9c, 0x83, 0x4e, 0xb6, 0x67, 0x12, 0xca, 0xc6, 0x62, 0xf3, 0xf5, 0x54, 0x8c, 0x06, 0x7b, 0x2e, 0x1e, 0x30, 0x08, 0xc8, 0x36, 0x8a, 0xaa, 0x00, 0x8c, 0x87, 0x0c, 0x8c, 0x07, 0x0d, 0x0f, 0x1b, 0x18, 0x0f, 0x1c, 0x2a, 0x1e, 0x3a, 0x04, 0x13, 0x09, 0x28, 0xa4, 0x57, 0x16, 0xba, 0x17, 0xcf, 0xc4, 0x68, 0x38, 0xf7, 0x0d, 0xb6, 0x69, 0x2f, 0x5c, 0xbd, 0xec, 0x84, 0x6a, 0x6d, 0xa7, 0x65, 0xa1, 0x13, 0x63, 0x6f, 0xee, 0x5c, 0xe1, 0x85, 0x77, 0xd5, 0x13, 0xba, 0x5a, 0x53, 0xbc, 0x2b, 0x9d, 0x98, 0xb2, 0xad, 0x7e, 0x28, 0xa3, 0xd1, 0xc8, 0xf9, 0x70, 0x66, 0x8b, 0x4c, 0xc7, 0xcd, 0x88, 0x38, 0x5b, 0x64, 0x3e, 0x22, 0x53, 0x3e, 0xe6, 0x43, 0x4e, 0x88, 0x9b, 0x10, 0x89, 0xf9, 0x70, 0xa6, 0x74, 0x05, 0xdc, 0x74, 0x90, 0xd9, 0x3c, 0x26, 0x64, 0x53, 0x46, 0xe6, 0x37, 0xf3, 0xb5, 0x19, 0x89, 0xcc, 0x08, 0x64, 0x42, 0x37, 0x9d, 0x88, 0xf9, 0x20, 0x93, 0x45, 0x66, 0x01, 0x37, 0x23, 0x9c, 0x50, 0x62, 0x3a, 0x12, 0x53, 0x36, 0x87, 0xaf, 0x2d, 0x6a, 0xa1, 0xe7, 0xa6, 0x6e, 0xc6, 0xd9, 0x4e, 0xa8, 0x1b, 0x3d, 0x94, 0xd1, 0xb0, 0x52, 0x85, 0x7a, 0xf3, 0x9e, 0x9a, 0xaa, 0xee, 0xc6, 0xd5, 0x03, 0x03, 0x0a, 0x1a, 0x49, 0xc3, 0x08, 0x24, 0x12, 0x9e, 0x04, 0x2a, 0x43, 0x24, 0x8b, 0x06, 0x09, 0xa2, 0x03, 0x47, 0x21, 0x99, 0x50, 0x05, 0xc3, 0x66, 0x80, 0x62, 0x4e, 0x68, 0x8e, 0x28, 0xcb, 0xd6, 0x7b, 0xa1, 0x92, 0xcd, 0x8e, 0x2f, 0x3b, 0xb2, 0x06, 0x1d, 0xe7, 0x5d, 0x93, 0xdf, 0xde, 0x79, 0xf9, 0xee, 0x5f, 0xba, 0x6f, 0xd8, 0x3b, 0x0e, 0x7c, 0x2c, 0x36, 0xf6, 0xe2, 0x6a, 0x4d, 0xb1, 0x5b, 0x7c, 0xd9, 0xb8, 0xee, 0xe8, 0x1c, 0x73, 0x9a, 0xf3, 0xef, 0x1d, 0xd7, 0x2d, 0xe1, 0x73, 0x1c, 0x84, 0xcc, 0xed, 0x5c, 0xe1, 0x9c, 0x21, 0x88, 0x66, 0xb7, 0x48, 0x51, 0xd6, 0xaf, 0xbd, 0xcb, 0x67, 0xa2, 0x63, 0xa0, 0x6b, 0x01, 0x3b, 0x3b, 0xbc, 0x12, 0xf6, 0x0a, 0x95, 0x52, 0xf9, 0x46, 0x3e, 0xd5, 0x5a, 0x6b, 0xc5, 0x64, 0xf3, 0x9a, 0x54, 0xd5, 0xc4, 0x5f, 0x33, 0x2b, 0xa2, 0x85, 0xeb, 0xce, 0x4c, 0x3a, 0x1e, 0xc2, 0xc3, 0x5f, 0x83, 0x77, 0xbe, 0x70, 0x75, 0xb6, 0x50, 0xa6, 0x85, 0xab, 0x5d, 0x41, 0x5b, 0xc8, 0xd7, 0xbc, 0x48, 0x54, 0x05, 0x51, 0x56, 0x2f, 0xc8, 0xe6, 0x4b, 0xb1, 0xfd, 0x35, 0x51, 0x9b, 0xb7, 0x5e, 0x78, 0x67, 0xf6, 0xd0, 0x9d, 0xa6, 0xb6, 0x90, 0x96, 0x95, 0x62, 0xbd, 0x72, 0x25, 0x55, 0xd5, 0x99, 0x50, 0x77, 0xba, 0x3b, 0xe2, 0xcb, 0x5e, 0x9b, 0xb2, 0x9b, 0xaa, 0x2a, 0xbc, 0x50, 0xc9, 0x42, 0x6b, 0x53, 0xaa, 0x0b, 0x95, 0xf0, 0x63, 0x4b, 0x53, 0xd5, 0xd5, 0x94, 0xdd, 0x16, 0xbb, 0x6a, 0x5d, 0x16, 0xba, 0x95, 0xb5, 0x73, 0x85, 0x35, 0x45, 0xf3, 0x5e, 0x9b, 0xd6, 0x29, 0xaf, 0x6c, 0x27, 0xa9, 0xb2, 0x58, 0x3b, 0xa2, 0x19, 0x72, 0x40, 0x37, 0xda, 0xf6, 0xba, 0x4d, 0xd9, 0x9b, 0xab, 0x35, 0x31, 0x9e, 0x34, 0x8d, 0x9d, 0xee, 0x5e, 0x10, 0x65, 0xf5, 0xd2, 0x15, 0xd4, 0xe1, 0xd0, 0x9b, 0xb2, 0xd3, 0xcd, 0x16, 0x5b, 0xac, 0x63, 0x92, 0x2b, 0x86, 0xa9, 0x54, 0x2a, 0x0e, 0xc7, 0xc4, 0x7b, 0x5b, 0x78, 0x9b, 0xdb, 0xea, 0x28, 0xaa, 0xf6, 0xdc, 0x16, 0x9b, 0x21, 0x8b, 0x85, 0x77, 0x9e, 0x7a, 0xa2, 0x99, 0xe2, 0x19, 0x6d, 0x7b, 0x27, 0x95, 0x29, 0xfe, 0xf3, 0xe5, 0xc4, 0x75, 0x67, 0x16, 0x1b, 0x67, 0xec, 0x5d, 0x4a, 0x77, 0xa4, 0xc3, 0xf6, 0x1e, 0xdb, 0x3b, 0x6c, 0xfc, 0x35, 0x2e, 0x21, 0x81, 0xf0, 0x98, 0x70, 0x48, 0x28, 0x1c, 0x38, 0x02, 0x00, 0x06, 0xc4, 0xe6, 0x39, 0x12, 0xbe, 0x13, 0x37, 0x65, 0x2f, 0xec, 0xb2, 0x54, 0x65, 0x81, 0xad, 0x64, 0xb7, 0xb3, 0xff, 0xd7, 0x44, 0x88, 0x07, 0xe1, 0x60, 0x74, 0xa2, 0x74, 0x13, 0x85, 0x22, 0xd0, 0x1e, 0x4d, 0x01, 0xb2, 0x12, 0xa6, 0x54, 0x95, 0xc0, 0x83, 0x68, 0x20, 0x1a, 0xc4, 0x43, 0x38, 0x08, 0xf6, 0x4c, 0xa8, 0x8b, 0x31, 0x9d, 0x28, 0x38, 0x94, 0xf0, 0x6e, 0x89, 0x32, 0x39, 0x94, 0xff, 0x8e, 0xff, 0xf7, 0x06, 0x36, 0xf0, 0x9f, 0x6a, 0x23, 0x88, 0xa2, 0x15, 0xd4, 0xb5, 0x9a, 0x42, 0x80, 0xfd, 0x63, 0xa7, 0xbb, 0x31, 0x75, 0x27, 0xff, 0xff, 0xff, 0x9f, 0x15, 0x51, 0x73, 0x30, 0xc6, 0x1c, 0xe7, 0xd0, 0x14, 0x5c, 0xf9, 0xff, 0x4b, 0xf6, 0xc2, 0x4a, 0x6b, 0xd5, 0xac, 0x5d, 0x63, 0xff, 0x1e, 0xa5, 0x43, 0xe9, 0x0d, 0xf4, 0xff, 0xbf, 0x10, 0x85, 0x3e, 0xd3, 0xac, 0x59, 0x6b, 0x05, 0x10, 0x0b, 0x11, 0x2e, 0x0c, 0x58, 0xa0, 0x78, 0x30, 0xb0, 0x93, 0x09, 0x97, 0x03, 0xd5, 0xb4, 0x13, 0xa5, 0xea, 0x6c, 0xef, 0xc5, 0xe8, 0xb0, 0xc8, 0x9a, 0x03, 0x89, 0x05, 0x89, 0x68, 0xe2, 0x73, 0xa0, 0x64, 0x8f, 0x39, 0x67, 0xcd, 0x79, 0x0c, 0xb6, 0xa6, 0x39, 0x8f, 0x20, 0x90, 0x58, 0x35, 0x6b, 0xf6, 0x4f, 0xa5, 0x82, 0xa8, 0x5b, 0x59, 0x1e, 0x63, 0x6c, 0xd8, 0xaa, 0x36, 0xb2, 0x58, 0x29, 0xf2, 0xd8, 0x54, 0x1b, 0x61, 0x89, 0xe2, 0x8c, 0x39, 0x52, 0x4a, 0x29, 0x21, 0x9b, 0xdd, 0x91, 0xb1, 0x7d, 0xfb, 0xf6, 0xb1, 0x7d, 0x6c, 0x1f, 0xdb, 0xc7, 0xf6, 0x8e, 0x04, 0x82, 0xc7, 0xf6, 0xaf, 0x79, 0x36, 0xa6, 0x0e, 0x9b, 0x89, 0xf7, 0x14, 0x59, 0x02, 0x80, 0xa7, 0xa8, 0x01, 0xa9, 0x42, 0x08, 0x19, 0x32, 0x44, 0x12, 0xc8, 0x88, 0x24, 0x49, 0x92, 0x0e, 0x60, 0x02, 0x91, 0xa1, 0x3a, 0x9a, 0x07, 0x12, 0xa0, 0xf0, 0x58, 0x10, 0xa4, 0x40, 0x1a, 0x47, 0x90, 0x22, 0x8c, 0x18, 0x43, 0x8c, 0x11, 0xcc, 0x04, 0x33, 0xd1, 0xcc, 0x04, 0x21, 0x2d, 0x28, 0x64, 0x38, 0x20, 0x6c, 0x00, 0x44, 0x26, 0xe6, 0x31, 0x02, 0x61, 0x47, 0x1f, 0xc6, 0x5a, 0x28, 0x8f, 0xc2, 0xa5, 0x48, 0xc4, 0x4b, 0x9e, 0x59, 0x8b, 0x6c, 0x02, 0x75, 0x60, 0xbe, 0xaa, 0xf1, 0x17, 0x5d, 0xea, 0xc6, 0x26, 0xe2, 0x55, 0x9d, 0x59, 0x5b, 0x76, 0x62, 0xc4, 0x85, 0x9f, 0xe3, 0x20, 0xe6, 0x53, 0xf2, 0x20, 0xbe, 0xa3, 0x9b, 0x03, 0x75, 0x70, 0x93, 0x20, 0x11, 0xf6, 0x32, 0xf2, 0xfc, 0x61, 0x00, 0xe4, 0x22, 0x7f, 0x12, 0xdd, 0x74, 0xce, 0x43, 0x44, 0x3c, 0xd9, 0xee, 0x22, 0x5d, 0xb2, 0x28, 0xcb, 0x4b, 0xac, 0x24, 0x59, 0x81, 0xee, 0x6c, 0x0f, 0xf1, 0x64, 0xe6, 0xb9, 0x89, 0x46, 0x0d, 0x77, 0x1f, 0x47, 0xcd, 0x5c, 0x94, 0xd0, 0x24, 0xac, 0xe2, 0xcf, 0x98, 0x66, 0x16, 0x60, 0x22, 0xc2, 0x1b, 0xa3, 0xda, 0x3d, 0xca, 0xb4, 0xba, 0xcc, 0xaa, 0x82, 0x00, 0x3d, 0x06, 0xbf, 0xcf, 0x27, 0x7d, 0xd8, 0xd9, 0x72, 0x2c, 0x6a, 0x38, 0x0b, 0x25, 0xfb, 0x48, 0x5c, 0xe2, 0xdf, 0x37, 0x16, 0x79, 0x12, 0xf9, 0xf0, 0xf5, 0xc5, 0x6f, 0xa9, 0x0f, 0x1e, 0x7b, 0x6e, 0xf0, 0x8e, 0xbf, 0x72, 0xec, 0x40, 0x5e, 0x67, 0x90, 0xe6, 0x96, 0x14, 0x87, 0xcc, 0x77, 0x1b, 0x35, 0x76, 0x0d, 0x6c, 0x1b, 0xfc, 0xad, 0x85, 0x06, 0x33, 0x52, 0x7b, 0x24, 0xd4, 0x58, 0x5e, 0xb8, 0x00, 0x90, 0xd8, 0xe7, 0x98, 0x71, 0xf1, 0x6f, 0x1f, 0xeb, 0xf5, 0xee, 0x6e, 0x9b, 0x36, 0x44, 0x0a, 0x03, 0x52, 0xf0, 0xb1, 0x00, 0x48, 0x60, 0xff, 0x0e, 0x68, 0x2f, 0x4d, 0xab, 0x46, 0xc1, 0xbe, 0x8e, 0x0b, 0x7d, 0xc3, 0x84, 0xc0, 0xe7, 0xa1, 0xe8, 0x26, 0x20, 0xeb, 0xba, 0x5e, 0xe1, 0x8c, 0xf6, 0x1d, 0x61, 0x64, 0x5c, 0x4c, 0xf6, 0xe9, 0xbf, 0xea, 0x62, 0x5d, 0xea, 0x10, 0x5a, 0xaa, 0x9b, 0x59, 0x4c, 0x1e, 0xda, 0x4a, 0x22, 0x4a, 0xa4, 0x4f, 0x53, 0x13, 0xb3, 0x85, 0xad, 0xb3, 0x6a, 0x82, 0x36, 0x61, 0x8d, 0x53, 0x8d, 0xa1, 0x98, 0x93, 0x4d, 0x34, 0xa4, 0x40, 0x76, 0x07, 0xd6, 0xff, 0x29, 0x7d, 0x7f, 0xa7, 0x85, 0xdc, 0x70, 0x9f, 0x94, 0x4b, 0xfe, 0xf1, 0x73, 0x06, 0x95, 0xd3, 0xec, 0x0b, 0x92, 0xed, 0xff, 0xc0, 0x58, 0xb6, 0x80, 0x6c, 0x4f, 0xb5, 0x65, 0x21, 0xf0, 0x90, 0x99, 0x28, 0x79, 0x1a, 0x5b, 0x90, 0x8c, 0x5e, 0x59, 0x82, 0x2c, 0xe5, 0x02, 0x4c, 0xe5, 0xb9, 0x84, 0x20, 0xb7, 0x04, 0x1d, 0x4d, 0x94, 0x87, 0x17, 0x05, 0x88, 0x19, 0x86, 0x11, 0x68, 0xa0, 0x65, 0x3c, 0x05, 0x18, 0x5e, 0xb4, 0xf2, 0x93, 0x41, 0xb2, 0x59, 0x38, 0x96, 0x8a, 0x70, 0x4f, 0x73, 0xa3, 0xf3, 0x55
`;

export const hexDump1_1 = `
0xc4, 0x01, 0x00, 0x14, 0x03, 0x3b, 0x32, 0x39, 0x12, 0x37, 0x0a, 0x01, 0x30, 0x12, 0x32, 0x0a, 0x01, 0x30, 0x12, 0x0a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x80, 0x08, 0x20, 0x80, 0x06, 0x18, 0x01, 0x22, 0x2a, 0x06, 0x08, 0x80, 0x08, 0x10, 0x80, 0x06, 0x35, 0x00, 0x00, 0x80, 0x3f, 0x42, 0x02, 0x08, 0x01, 0x4a, 0x02, 0x08, 0x02, 0x01, 0x00, 0x84, 0x31, 0x9d
`;
export const hexDump1_2 = `
0x28, 0xb5, 0x2f, 0xfd, 0x00, 0x58, 0xd4, 0x2d, 0x00, 0xaa, 0x57, 0x30, 0x10, 0x33, 0x20, 0x6d, 0x9b, 0x07, 0x24, 0xba, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x8c, 0x52, 0xf8, 0xa8, 0xe0, 0x84, 0xa9, 0xbb, 0xa7, 0x12, 0x6f, 0x34, 0x41, 0x9f, 0xc7, 0xc5, 0x0a, 0x0f, 0xaf, 0xf0, 0x55, 0xe8, 0x5f, 0xc9, 0xba, 0x88, 0x91, 0x22, 0x96, 0x29, 0xb0, 0xfe, 0xcd, 0x6c, 0x05, 0x11, 0x84, 0x85, 0x54, 0x57, 0xf9, 0x00, 0xf6, 0x00, 0xf1, 0x00, 0x8c, 0x94, 0x1e, 0x19, 0x6c, 0x8f, 0x41, 0x07, 0xbe, 0x7b, 0xf8, 0x10, 0xb6, 0xd7, 0x9c, 0x7b, 0x86, 0x39, 0x8c, 0x03, 0x9f, 0x69, 0xf2, 0x3d, 0x3a, 0xd0, 0xc9, 0x6f, 0xed, 0x41, 0xf9, 0xb0, 0xc5, 0x77, 0xe8, 0xae, 0x0a, 0xb9, 0xaa, 0x6c, 0x4b, 0x39, 0xcb, 0x96, 0xb2, 0x13, 0xdf, 0xba, 0xb2, 0x70, 0x7c, 0xd9, 0xfe, 0x9c, 0xe6, 0x35, 0xce, 0x9a, 0xc6, 0x34, 0x86, 0x31, 0xec, 0xbd, 0x69, 0x8d, 0xc1, 0xd6, 0xda, 0x37, 0xc7, 0x10, 0xc5, 0xdf, 0x1f, 0x74, 0xdc, 0x7b, 0x0f, 0x36, 0x6d, 0xda, 0x4d, 0xa1, 0x0b, 0x51, 0xb4, 0x4a, 0x86, 0x31, 0x90, 0x35, 0x06, 0xc2, 0xa7, 0x32, 0x1a, 0x92, 0xa5, 0x28, 0x6a, 0x51, 0xe9, 0xa6, 0xd0, 0xaa, 0x3b, 0x57, 0xd8, 0x8a, 0x4b, 0x28, 0x20, 0x13, 0x8e, 0x89, 0x04, 0x14, 0x11, 0x87, 0x24, 0xf2, 0xc0, 0x5f, 0x8b, 0xef, 0x9d, 0xaa, 0xee, 0xa6, 0xf5, 0x4a, 0x18, 0xd3, 0x67, 0x62, 0x34, 0x26, 0x14, 0x44, 0xf0, 0x59, 0xef, 0xa6, 0xe8, 0x64, 0xf5, 0x82, 0xae, 0x9e, 0x1e, 0xca, 0x68, 0x40, 0xd6, 0x72, 0xa7, 0x55, 0xa9, 0x24, 0x89, 0x2e, 0x4c, 0xa7, 0x6d, 0xb1, 0x0f, 0x65, 0x34, 0x9a, 0xbf, 0x33, 0x8f, 0x48, 0x10, 0x59, 0xf0, 0xa0, 0xc0, 0xc4, 0x94, 0x2a, 0x4f, 0x1e, 0xca, 0x68, 0x30, 0x67, 0xcf, 0x66, 0x34, 0xd6, 0xa3, 0x19, 0x8d, 0x67, 0x18, 0xc3, 0x98, 0xd8, 0xde, 0x9d, 0x04, 0x81, 0x2f, 0x40, 0xe0, 0x8d, 0x47, 0xf7, 0x9c, 0x83, 0x4e, 0xb6, 0x67, 0x12, 0xca, 0xc6, 0x62, 0xf3, 0xf5, 0x54, 0x8c, 0x06, 0x7b, 0x2e, 0x1e, 0x30, 0x08, 0xc8, 0x36, 0x8a, 0xaa, 0x00, 0x8c, 0x87, 0x0c, 0x8c, 0x07, 0x0d, 0x0f, 0x1b, 0x18, 0x0f, 0x1c, 0x2a, 0x1e, 0x3a, 0x04, 0x13, 0x09, 0x28, 0xa4, 0x57, 0x16, 0xba, 0x17, 0xcf, 0xc4, 0x68, 0x38, 0xf7, 0x0d, 0xb6, 0x69, 0x2f, 0x5c, 0xbd, 0xec, 0x84, 0x6a, 0x6d, 0xa7, 0x65, 0xa1, 0x13, 0x63, 0x6f, 0xee, 0x5c, 0xe1, 0x85, 0x77, 0xd5, 0x13, 0xba, 0x5a, 0x53, 0xbc, 0x2b, 0x9d, 0x98, 0xb2, 0xad, 0x7e, 0x28, 0xa3, 0xd1, 0xc8, 0xf9, 0x70, 0x66, 0x8b, 0x4c, 0xc7, 0xcd, 0x88, 0x38, 0x5b, 0x64, 0x3e, 0x22, 0x53, 0x3e, 0xe6, 0x43, 0x4e, 0x88, 0x9b, 0x10, 0x89, 0xf9, 0x70, 0xa6, 0x74, 0x05, 0xdc, 0x74, 0x90, 0xd9, 0x3c, 0x26, 0x64, 0x53, 0x46, 0xe6, 0x37, 0xf3, 0xb5, 0x19, 0x89, 0xcc, 0x08, 0x64, 0x42, 0x37, 0x9d, 0x88, 0xf9, 0x20, 0x93, 0x45, 0x66, 0x01, 0x37, 0x23, 0x9c, 0x50, 0x62, 0x3a, 0x12, 0x53, 0x36, 0x87, 0xaf, 0x2d, 0x6a, 0xa1, 0xe7, 0xa6, 0x6e, 0xc6, 0xd9, 0x4e, 0xa8, 0x1b, 0x3d, 0x94, 0xd1, 0xb0, 0x52, 0x85, 0x7a, 0xf3, 0x9e, 0x9a, 0xaa, 0xee, 0xc6, 0xd5, 0x03, 0x03, 0x0a, 0x1a, 0x49, 0xc3, 0x08, 0x24, 0x12, 0x9e, 0x04, 0x2a, 0x43, 0x24, 0x8b, 0x06, 0x09, 0xa2, 0x03, 0x47, 0x21, 0x99, 0x50, 0x05, 0xc3, 0x66, 0x80, 0x62, 0x4e, 0x68, 0x8e, 0x28, 0xcb, 0xd6, 0x7b, 0xa1, 0x92, 0xcd, 0x8e, 0x2f, 0x3b, 0xb2, 0x06, 0x1d, 0xe7, 0x5d, 0x93, 0xdf, 0xde, 0x79, 0xf9, 0xee, 0x5f, 0xba, 0x6f, 0xd8, 0x3b, 0x0e, 0x7c, 0x2c, 0x36, 0xf6, 0xe2, 0x6a, 0x4d, 0xb1, 0x5b, 0x7c, 0xd9, 0xb8, 0xee, 0xe8, 0x1c, 0x73, 0x9a, 0xf3, 0xef, 0x1d, 0xd7, 0x2d, 0xe1, 0x73, 0x1c, 0x84, 0xcc, 0xed, 0x5c, 0xe1, 0x9c, 0x21, 0x88, 0x66, 0xb7, 0x48, 0x51, 0xd6, 0xaf, 0xbd, 0xcb, 0x67, 0xa2, 0x63, 0xa0, 0x6b, 0x01, 0x3b, 0x3b, 0xbc, 0x12, 0xf6, 0x0a, 0x95, 0x52, 0xf9, 0x46, 0x3e, 0xd5, 0x5a, 0x6b, 0xc5, 0x64, 0xf3, 0x9a, 0x54, 0xd5, 0xc4, 0x5f, 0x33, 0x2b, 0xa2, 0x85, 0xeb, 0xce, 0x4c, 0x3a, 0x1e, 0xc2, 0xc3, 0x5f, 0x83, 0x77, 0xbe, 0x70, 0x75, 0xb6, 0x50, 0xa6, 0x85, 0xab, 0x5d, 0x41, 0x5b, 0xc8, 0xd7, 0xbc, 0x48, 0x54, 0x05, 0x51, 0x56, 0x2f, 0xc8, 0xe6, 0x4b, 0xb1, 0xfd, 0x35, 0x51, 0x9b, 0xb7, 0x5e, 0x78, 0x67, 0xf6, 0xd0, 0x9d, 0xa6, 0xb6, 0x90, 0x96, 0x95, 0x62, 0xbd, 0x72, 0x25, 0x55, 0xd5, 0x99, 0x50, 0x77, 0xba, 0x3b, 0xe2, 0xcb, 0x5e, 0x9b, 0xb2, 0x9b, 0xaa, 0x2a, 0xbc, 0x50, 0xc9, 0x42, 0x6b, 0x53, 0xaa, 0x0b, 0x95, 0xf0, 0x63, 0x4b, 0x53, 0xd5, 0xd5, 0x94, 0xdd, 0x16, 0xbb, 0x6a, 0x5d, 0x16, 0xba, 0x95, 0xb5, 0x73, 0x85, 0x35, 0x45, 0xf3, 0x5e, 0x9b, 0xd6, 0x29, 0xaf, 0x6c, 0x27, 0xa9, 0xb2, 0x58, 0x3b, 0xa2, 0x19, 0x72, 0x40, 0x37, 0xda, 0xf6, 0xba, 0x4d, 0xd9, 0x9b, 0xab, 0x35, 0x31, 0x9e, 0x34, 0x8d, 0x9d, 0xee, 0x5e, 0x10, 0x65, 0xf5, 0xd2, 0x15, 0xd4, 0xe1, 0xd0, 0x9b, 0xb2, 0xd3, 0xcd, 0x16, 0x5b, 0xac, 0x63, 0x92, 0x2b, 0x86, 0xa9, 0x54, 0x2a, 0x0e, 0xc7, 0xc4, 0x7b, 0x5b, 0x78, 0x9b, 0xdb, 0xea, 0x28, 0xaa, 0xf6, 0xdc, 0x16, 0x9b, 0x21, 0x8b, 0x85, 0x77, 0x9e, 0x7a, 0xa2, 0x99, 0xe2, 0x19, 0x6d, 0x7b, 0x27, 0x95, 0x29, 0xfe, 0xf3, 0xe5, 0xc4, 0x75, 0x67, 0x16, 0x1b, 0x67, 0xec, 0x5d, 0x4a, 0x77, 0xa4, 0xc3, 0xf6, 0x1e, 0xdb, 0x3b, 0x6c, 0xfc, 0x35, 0x2e, 0x21, 0x81, 0xf0, 0x98, 0x70, 0x48, 0x28, 0x1c, 0x38, 0x02, 0x00, 0x06, 0xc4, 0xe6, 0x39, 0x12, 0xbe, 0x13, 0x37, 0x65, 0x2f, 0xec, 0xb2, 0x54, 0x65, 0x81, 0xad, 0x64, 0xb7, 0xb3, 0xff, 0xd7, 0x44, 0x88, 0x07, 0xe1, 0x60, 0x74, 0xa2, 0x74, 0x13, 0x85, 0x22, 0xd0, 0x1e, 0x4d, 0x01, 0xb2, 0x12, 0xa6, 0x54, 0x95, 0xc0, 0x83, 0x68, 0x20, 0x1a, 0xc4, 0x43, 0x38, 0x08, 0xf6, 0x4c, 0xa8, 0x8b, 0x31, 0x9d, 0x28, 0x38, 0x94, 0xf0, 0x6e, 0x89, 0x32, 0x39, 0x94, 0xff, 0x8e, 0xff, 0xf7, 0x06, 0x36, 0xf0, 0x9f, 0x6a, 0x23, 0x88, 0xa2, 0x15, 0xd4, 0xb5, 0x9a, 0x42, 0x80, 0xfd, 0x63, 0xa7, 0xbb, 0x31, 0x75, 0x27, 0xff, 0xff, 0xff, 0x9f, 0x15, 0x51, 0x73, 0x30, 0xc6, 0x1c, 0xe7, 0xd0, 0x14, 0x5c, 0xf9, 0xff, 0x4b, 0xf6, 0xc2, 0x4a, 0x6b, 0xd5, 0xac, 0x5d, 0x63, 0xff, 0x1e, 0xa5, 0x43, 0xe9, 0x0d, 0xf4, 0xff, 0xbf, 0x10, 0x85, 0x3e, 0xd3, 0xac, 0x59, 0x6b, 0x05, 0x10, 0x0b, 0x11, 0x2e, 0x0c, 0x58, 0xa0, 0x78, 0x30, 0xb0, 0x93, 0x09, 0x97, 0x03, 0xd5, 0xb4, 0x13, 0xa5, 0xea, 0x6c, 0xef, 0xc5, 0xe8, 0xb0, 0xc8, 0x9a, 0x03, 0x89, 0x05, 0x89, 0x68, 0xe2, 0x73, 0xa0, 0x64, 0x8f, 0x39, 0x67, 0xcd, 0x79, 0x0c, 0xb6, 0xa6, 0x39, 0x8f, 0x20, 0x90, 0x58, 0x35, 0x6b, 0xf6, 0x4f, 0xa5, 0x82, 0xa8, 0x5b, 0x59, 0x1e, 0x63, 0x6c, 0xd8, 0xaa, 0x36, 0xb2, 0x58, 0x29, 0xf2, 0xd8, 0x54, 0x1b, 0x61, 0x89, 0xe2, 0x8c, 0x39, 0x52, 0x4a, 0x29, 0x21, 0x9b, 0xdd, 0x91, 0xb1, 0x7d, 0xfb, 0xf6, 0xb1, 0x7d, 0x6c, 0x1f, 0xdb, 0xc7, 0xf6, 0x8e, 0x04, 0x82, 0xc7, 0xf6, 0xaf, 0x79, 0x36, 0xa6, 0x0e, 0x9b, 0x89, 0xf7, 0x14, 0x59, 0x02, 0x80, 0xa7, 0xa8, 0x01, 0xa9, 0x42, 0x08, 0x19, 0x32, 0x44, 0x12, 0xc8, 0x88, 0x24, 0x49, 0x92, 0x0e, 0x60, 0x02, 0x91, 0xa1, 0x3a, 0x9a, 0x07, 0x12, 0xa0, 0xf0, 0x58, 0x10, 0xa4, 0x40, 0x1a, 0x47, 0x90, 0x22, 0x8c, 0x18, 0x43, 0x8c, 0x11, 0xcc, 0x04, 0x33, 0xd1, 0xcc, 0x04, 0x21, 0x2d, 0x28, 0x64, 0x38, 0x20, 0x6c, 0x00, 0x44, 0x26, 0xe6, 0x31, 0x02, 0x61, 0x47, 0x1f, 0xc6, 0x5a, 0x28, 0x8f, 0xc2, 0xa5, 0x48, 0xc4, 0x4b, 0x9e, 0x59, 0x8b, 0x6c, 0x02, 0x75, 0x60, 0xbe, 0xaa, 0xf1, 0x17, 0x5d, 0xea, 0xc6, 0x26, 0xe2, 0x55, 0x9d, 0x59, 0x5b, 0x76, 0x62, 0xc4, 0x85, 0x9f, 0xe3, 0x20, 0xe6, 0x53, 0xf2, 0x20, 0xbe, 0xa3, 0x9b, 0x03, 0x75, 0x70, 0x93, 0x20, 0x11, 0xf6, 0x32, 0xf2, 0xfc, 0x61, 0x00, 0xe4, 0x22, 0x7f, 0x12, 0xdd, 0x74, 0xce, 0x43, 0x44, 0x3c, 0xd9, 0xee, 0x22, 0x5d, 0xb2, 0x28, 0xcb, 0x4b, 0xac, 0x24, 0x59, 0x81, 0xee, 0x6c, 0x0f, 0xf1, 0x64, 0xe6, 0xb9, 0x89, 0x46, 0x0d, 0x77, 0x1f, 0x47, 0xcd, 0x5c, 0x94, 0xd0, 0x24, 0xac, 0xe2, 0xcf, 0x98, 0x66, 0x16, 0x60, 0x22, 0xc2, 0x1b, 0xa3, 0xda, 0x3d, 0xca, 0xb4, 0xba, 0xcc, 0xaa, 0x82, 0x00, 0x3d, 0x06, 0xbf, 0xcf, 0x27, 0x7d, 0xd8, 0xd9, 0x72, 0x2c, 0x6a, 0x38, 0x0b, 0x25, 0xfb, 0x48, 0x5c, 0xe2, 0xdf, 0x37, 0x16, 0x79, 0x12, 0xf9, 0xf0, 0xf5, 0xc5, 0x6f, 0xa9, 0x0f, 0x1e, 0x7b, 0x6e, 0xf0, 0x8e, 0xbf, 0x72, 0xec, 0x40, 0x5e, 0x67, 0x90, 0xe6, 0x96, 0x14, 0x87, 0xcc, 0x77, 0x1b, 0x35, 0x76, 0x0d, 0x6c, 0x1b, 0xfc, 0xad, 0x85, 0x06, 0x33, 0x52, 0x7b, 0x24, 0xd4, 0x58, 0x5e, 0xb8, 0x00, 0x90, 0xd8, 0xe7, 0x98, 0x71, 0xf1, 0x6f, 0x1f, 0xeb, 0xf5, 0xee, 0x6e, 0x9b, 0x36, 0x44, 0x0a, 0x03, 0x52, 0xf0, 0xb1, 0x00, 0x48, 0x60, 0xff, 0x0e, 0x68, 0x2f, 0x4d, 0xab, 0x46, 0xc1, 0xbe, 0x8e, 0x0b, 0x7d, 0xc3, 0x84, 0xc0, 0xe7, 0xa1, 0xe8, 0x26, 0x20, 0xeb, 0xba, 0x5e, 0xe1, 0x8c, 0xf6, 0x1d, 0x61, 0x64, 0x5c, 0x4c, 0xf6, 0xe9, 0xbf, 0xea, 0x62, 0x5d, 0xea, 0x10, 0x5a, 0xaa, 0x9b, 0x59, 0x4c, 0x1e, 0xda, 0x4a, 0x22, 0x4a, 0xa4, 0x4f, 0x53, 0x13, 0xb3, 0x85, 0xad, 0xb3, 0x6a, 0x82, 0x36, 0x61, 0x8d, 0x53, 0x8d, 0xa1, 0x98, 0x93, 0x4d, 0x34, 0xa4, 0x40, 0x76, 0x07, 0xd6, 0xff, 0x29, 0x7d, 0x7f, 0xa7, 0x85, 0xdc, 0x70, 0x9f, 0x94, 0x4b, 0xfe, 0xf1, 0x73, 0x06, 0x95, 0xd3, 0xec, 0x0b, 0x92, 0xed, 0xff, 0xc0, 0x58, 0xb6, 0x80, 0x6c, 0x4f, 0xb5, 0x65, 0x21, 0xf0, 0x90, 0x99, 0x28, 0x79, 0x1a, 0x5b, 0x90, 0x8c, 0x5e, 0x59, 0x82, 0x2c, 0xe5, 0x02, 0x4c, 0xe5, 0xb9, 0x84, 0x20, 0xb7, 0x04, 0x1d, 0x4d, 0x94, 0x87, 0x17, 0x05, 0x88, 0x19, 0x86, 0x11, 0x68, 0xa0, 0x65, 0x3c, 0x05, 0x18, 0x5e, 0xb4, 0xf2, 0x93, 0x41, 0xb2, 0x59, 0x38, 0x96, 0x8a, 0x70, 0x4f, 0x73, 0xa3, 0xf3, 0x55, 0xc4, 0x01, 0x00, 0x14, 0x03, 0x3b, 0x32, 0x39, 0x12, 0x37, 0x0a, 0x01, 0x30, 0x12, 0x32, 0x0a, 0x01, 0x30, 0x12, 0x0a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x80, 0x08, 0x20, 0x80, 0x06, 0x18, 0x01, 0x22, 0x2a, 0x06, 0x08, 0x80, 0x08, 0x10, 0x80, 0x06, 0x35, 0x00, 0x00, 0x80, 0x3f, 0x42, 0x02, 0x08, 0x01, 0x4a, 0x02, 0x08, 0x02, 0x01, 0x00, 0x84, 0x31, 0x9d
`;

export const dummy = {};
function isValidZstdData(data: Uint8Array): boolean {
  if (data.length < 4) {
    console.log("isValidZstdData", data.length, "return false");
    return false;
  }

  // Log the first 4 bytes in hexadecimal
  console.log(
    "First 4 bytes:",
    "0x" + data[0].toString(16).padStart(2, "0"),
    "0x" + data[1].toString(16).padStart(2, "0"),
    "0x" + data[2].toString(16).padStart(2, "0"),
    "0x" + data[3].toString(16).padStart(2, "0")
  );

  const isLittleEndian =
    data[0] === 0x28 &&
    data[1] === 0xb5 &&
    data[2] === 0x2f &&
    data[3] === 0xfd;

  const isBigEndian =
    data[0] === 0xfd &&
    data[1] === 0x2f &&
    data[2] === 0xb5 &&
    data[3] === 0x28;

  return isLittleEndian || isBigEndian;

  /*

  //  ZSTD_MAGIC_NUMBER = 0xFD2FB528;
  const isValid = (
    data[0] === 0xfd && data[1] === 0x2f && data[2] === 0xb5 && data[3] === 0x28
  );
  
  console.log("Expected:", "0xfd", "0x2f", "0xb5", "0x28");
  console.log("IsValid:", isValid);
  
  return isValid;

    */
}

function hexStringsToUint8Array(hexStrings: string[]): Uint8Array {
  // Remove comments, 0x, commas, spaces, and newlines
  // const cleanHex = hexString.replace(/0x|,|\s|\/\/.*/g, '');
  const cleanHex = hexStrings.join("").replace(/0x|,|\s|\/\/.*/g, "");

  const numbers = new Uint8Array(cleanHex.length / 2);
  for (let i = 0; i < cleanHex.length; i += 2) {
    numbers[i / 2] = parseInt(cleanHex.substr(i, 2), 16);
  }
  return numbers;
}

function hexStringToUint8Array(hexString: string): Uint8Array {
  // Remove whitespace, newlines, and backticks
  const cleanedHexString = hexString.replace(/[\s`]/g, "");

  // Split the string by commas and remove the "0x" prefix
  const hexValues = cleanedHexString
    .split(",")
    .map((hex) => hex.replace("0x", ""));

  // Convert hex values to numbers and create Uint8Array
  const uint8Array = new Uint8Array(hexValues.map((hex) => parseInt(hex, 16)));

  return uint8Array;
}

function decompressFileSimple(inputPath: string, outputPath: string) {
  try {
    // Read the compressed file
    const compressedData = fs.readFileSync(inputPath);

    // Convert to Uint8Array if it's not already
    const compressedArray = new Uint8Array(compressedData);

    const isValid = isValidZstdData(compressedArray);
    console.log("File is valid Zstd:", isValid);

    // Decompress the data
    const decompressedData = decompress(compressedArray);

    // Write the decompressed data to a file
    fs.writeFileSync(outputPath, decompressedData);

    console.log("File successfully decompressed!");
    console.log("Original size:", compressedData.length, "bytes");
    console.log("Decompressed size:", decompressedData.length, "bytes");
  } catch (error) {
    console.error("Error decompressing file:", error);
  }
}

function decompressFile(inputPath: string, outputPath: string) {
  try {
    const compressedData = fs.readFileSync(inputPath);
    const compressedArray = new Uint8Array(compressedData);

    const isValid = isValidZstdData(compressedArray);
    console.log("File is valid Zstd:", isValid);

    let totalSize = 0;

    const writeStream = fs.createWriteStream(outputPath);

    const stream = new Decompress((chunk, isLast) => {
      writeStream.write(Buffer.from(chunk));
      totalSize += chunk.length;

      if (isLast) {
        writeStream.end();
        console.log("File successfully decompressed!");
        console.log("Original size:", compressedData.length, "bytes");
        console.log("Decompressed size:", totalSize, "bytes");
      }
    });

    const chunkSize = 16 * 1024;
    for (let i = 0; i < compressedArray.length; i += chunkSize) {
      const chunk = compressedArray.slice(i, i + chunkSize);
      const isLastChunk = i + chunkSize >= compressedArray.length;
      stream.push(chunk, isLastChunk);
    }
  } catch (error) {
    console.error("Error decompressing file:", error);
  }
}

// decompressFile(
// "dist/dance_yorokobi_mai_woman.bmp.zst",
// "dist/dance_yorokobi_mai_woman.bmp"
// );

// testCompressDecompress().catch(console.error);

const hexDump0 = [
  "0x28,0xb5,0x2f,0xfd,0x00,0x58,0x7c,0x2d,0x00,0x7a,0x57,0x0c,0x10,0x33,0x20,0x6d",
  "0x9b,0x07,0x24,0xba,0x00,0x18,0x00,0x0c,0x00,0x0c,0x40,0xe1,0x91,0xd8,0x91,0xa5",
  "0xa9,0x1b,0x43,0x01,0x5b,0x23,0xdd,0x71,0x76,0xee,0xd6,0x1c,0xb3,0x95,0x1f,0x4a",
  "0xd6,0x45,0x8c,0x58,0xd9,0x4c,0x81,0xf5,0x6f,0x66,0x2b,0x88,0x20,0x2c,0xa4,0xba",
  "0x02,0xf9,0x00,0xf5,0x00,0xee,0x00,0xd1,0xe1,0x7a,0x8c,0x59,0xaf,0x79,0xff,0xed",
  "0x31,0x18,0x1d,0xd3,0xbc,0xfb,0xc5,0xb9,0x5f,0x18,0xb6,0x30,0xf8,0x0e,0x9b,0xe7",
  "0xe2,0xaf,0x67,0x98,0xf5,0x6e,0xb9,0xf7,0xc7,0xaa,0x8b,0x3c,0x4d,0x76,0xbd,0xbe",
  "0x72,0xbd,0x35,0xe2,0x5b,0x4f,0x16,0x8e,0x2b,0xdb,0x99,0xa6,0x31,0xcd,0x57,0x63",
  "0x0b,0x5b,0xd6,0xb2,0xde,0x1b,0x63,0xeb,0x31,0xc6,0x9e,0x39,0x7e,0x24,0xfe,0x1e",
  "0x9b,0xc8,0x3c,0x86,0xb1,0xc5,0x64,0xdd,0xf3,0xb1,0xcf,0x9d,0x34,0x2e,0x6b,0x79",
  "0x8b,0x2d,0xef,0x39,0x94,0xd1,0x88,0xea,0xbd,0xd3,0x82,0xce,0x3d,0x1f,0x45,0x77",
  "0xae,0xa8,0x13,0x9f,0x70,0x10,0x41,0xe1,0xa0,0x48,0xe0,0x00,0xe2,0x98,0x80,0x3c",
  "0xf0,0xf8,0x16,0x63,0x7e,0x27,0xbb,0x27,0xb5,0x11,0xc6,0xd3,0x91,0x18,0x0d,0x0a",
  "0x05,0x11,0x5c,0x52,0xbb,0xef,0x94,0xaa,0x56,0x8f,0xd5,0x92,0x33,0x19,0x8d,0xa7",
  "0x52,0xac,0xa4,0x26,0x53,0x14,0x4d,0x85,0xa7,0xb4,0x29,0xd5,0x99,0x8c,0x06,0xf3",
  "0xf7,0xe5,0x06,0x12,0x40,0x16,0x3c,0x28,0x20,0xb1,0x64,0xca,0x11,0x67,0x32,0x1a",
  "0xcb,0x97,0xb3,0x19,0x0d,0xe5,0x68,0x46,0xe3,0x97,0xb5,0xac,0x05,0xb2,0x77,0x37",
  "0x81,0xc0,0x17,0x20,0xf0,0xe6,0x8c,0x31,0x8b,0x31,0x0b,0x32,0xf0,0x35,0x0c,0xf3",
  "0x8d,0x31,0xef,0xca,0x99,0x18,0x8d,0xe5,0x58,0x78,0xc0,0x20,0x20,0x57,0x08,0x9a",
  "0x02,0x30,0x1e,0x32,0x30,0x1e,0x34,0x3c,0x6c,0x60,0x3c,0x70,0xa8,0x78,0xe8,0x10",
  "0x14,0x09,0x1c,0xf8,0x54,0x1f,0x6b,0xc1,0x91,0x18,0x0d,0xe7,0x9e,0x3d,0x26,0xeb",
  "0x05,0xab,0x55,0x8d,0x4c,0xad,0xab,0xa4,0x28,0x53,0x5a,0x8b,0x91,0x3b,0x4f,0x58",
  "0xe1,0x4d,0xb5,0x7c,0xac,0xd6,0x13,0x6f,0x3a,0x25,0x96,0xec,0xaa,0x9d,0xc9,0x68",
  "0xb4,0x28,0x1f,0x8d,0x64,0x10,0xd9,0x38,0x69,0x00,0x4a,0x06,0x91,0x0f,0x88,0x8c",
  "0x0f,0xf9,0x88,0x32,0xc2,0xc9,0x08,0x09,0xf9,0x68,0x64,0x74,0x05,0x9c,0x74,0x11",
  "0xb2,0x3d,0xe4,0x5b,0x32,0x42,0xe4,0x37,0xc9,0x30,0x09,0x81,0x48,0x48,0x84,0x7c",
  "0x4e,0x36,0x06,0x24,0x13,0x21,0x17,0x44,0x16,0x70,0x12,0x3e,0xf9,0x24,0x64,0x23",
  "0x21,0x23,0xf3,0xc7,0x30,0x35,0x2d,0xb4,0xdc,0xd7,0x66,0x9c,0x6b,0xe4,0x5a,0xc8",
  "0x99,0x8c,0x46,0x8d,0x2e,0xa8,0xcd,0x5b,0xea,0x3b,0xd9,0x8d,0xa7,0xc8,0x9c,0x26",
  "0xfa,0x1f,0x15,0x1e,0x4c,0x2e,0x85,0x7c,0xc0,0xe2,0xd1,0x02,0x0f,0x76,0x81,0xc2",
  "0x45,0x45,0x3e,0x13,0x0c,0x61,0x28,0x92,0x91,0x99,0x21,0x89,0xaa,0xd4,0x56,0x66",
  "0x54,0xb3,0xe3,0xca,0x86,0x8b,0xbd,0xa6,0x79,0xb7,0x9a,0xd5,0xb0,0x06,0xba,0x77",
  "0xff,0xd1,0x3d,0x6b,0x0c,0x64,0x5a,0xd3,0x58,0xb5,0x60,0xb5,0x9e,0xd8,0x2b,0xae",
  "0x6c,0x4c,0x37,0x74,0x6e,0x35,0xac,0x79,0xe6,0x1d,0xd3,0xed,0xef,0x4c,0xe3,0x3e",
  "0x46,0xb7,0x7e,0xe7,0x09,0xe7,0xfc,0x3c,0x33,0x3b,0x25,0x82,0xb2,0x8e,0xbf,0x40",
  "0xb7,0x3c,0xc7,0x96,0x18,0xd9,0x9f,0x8d,0xb0,0x5f,0xd0,0x79,0xb3,0x85,0x5c,0xa2",
  "0x94,0xd2,0x0a,0xa9,0x66,0x15,0x99,0xa6,0x88,0x33,0x4d,0x56,0x40,0x0a,0xd3,0x9d",
  "0x57,0x74,0x3c,0x84,0x87,0x33,0x0d,0xef,0x7c,0xc1,0xea,0x4c,0x91,0x48,0x0a,0x4f",
  "0xfb,0x42,0xd7,0xc7,0x95,0xac,0x44,0x77,0x7a,0x6e,0xd5,0xea,0xa9,0xd9,0x4e,0x5c",
  "0x5f,0x49,0xb3,0xe6,0xad,0x15,0xde,0x79,0xfd,0x63,0x25,0xa9,0xeb,0xa3,0x23,0x9d",
  "0x58,0xab,0x3c,0x45,0x13,0x6d,0x22,0xd7,0x4a,0x76,0x43,0x5c,0xd9,0x6a,0xdf,0xba",
  "0xef,0x44,0x5f,0x65,0x46,0xf5,0x51,0x5b,0x32,0x55,0x66,0x84,0x99,0xa5,0xf4,0x9d",
  "0xac,0xbe,0x75,0x53,0xaa,0xa2,0x54,0xd5,0xc7,0x4e,0xd4,0xce,0x13,0xd6,0x77,0xe6",
  "0xad,0xf6,0xa4,0x52,0x56,0xb9,0x4a,0xd1,0x64,0xa1,0x36,0x34,0xf3,0xe3,0x78,0x2c",
  "0xb4,0xab,0x75,0xfb,0x56,0x9b,0x27,0x25,0x31,0x8e,0xb4,0x56,0x25,0xbb,0xd5,0x73",
  "0xab,0x56,0xba,0x62,0x3a,0x1c,0x7a,0xdf,0x2a,0xd9,0x5c,0x31,0xa5,0x3a,0x22,0x79",
  "0x5a,0x96,0xc9,0x64,0xe2,0x70,0x48,0xbc,0xb7,0x85,0x33,0xb9,0xab,0x86,0xa0,0x69",
  "0xcb,0x4d,0xa9,0xf9,0xb1,0x50,0x78,0x67,0xa9,0xa5,0x99,0x27,0x96,0xd0,0xae,0x56",
  "0xde,0x2c,0xf1,0x97,0x1f,0x25,0xa6,0x3b,0x2f,0xd8,0x7c,0xad,0xf7,0x18,0xbd,0x89",
  "0xfe,0xd8,0x3b,0x64,0xef,0xaf,0x39,0xd3,0x5c,0x62,0x02,0xc2,0x83,0xc2,0x31,0xe1",
  "0xa0,0x81,0x23,0x00,0x06,0xbc,0x86,0x3d,0x8c,0x2e,0xca,0x7d,0xab,0x85,0xaa,0xea",
  "0x9d,0x2c,0x70,0x8d,0xea,0xf6,0xf5,0xcf,0x34,0x08,0xc1,0x40,0xb8,0x07,0x1b,0x18",
  "0x9d,0x24,0xb9,0x04,0x98,0xa3,0x27,0x3c,0x35,0xc2,0x92,0x89,0x12,0x60,0x20,0x1a",
  "0x04,0x83,0x78,0x08,0x07,0xb1,0x9c,0xc8,0xb5,0x18,0x4f,0x69,0x82,0xbf,0xf8,0xec",
  "0x8e,0x24,0x92,0xbf,0xf8,0xef,0xf8,0x7f,0x6f,0xaf,0xbd,0x77,0x68,0x85,0x9e,0x3b",
  "0x2b,0xae,0xad,0x5a,0x42,0x60,0xbd,0x53,0x25,0xbb,0xf1,0xb5,0x92,0xff,0xff,0xff",
  "0xcb,0x0a,0x88,0x39,0xd6,0x5a,0x8d,0x73,0x68,0x09,0x9e,0xfc,0xff,0xa3,0x6a,0xa1",
  "0x46,0x4a,0xd1,0xac,0x1d,0x5b,0xff,0x0e,0xa3,0xbf,0xe8,0xed,0xf9,0xff,0xdb,0x47",
  "0x32,0x1d,0x49,0xd2,0xac,0xf5,0xae,0x20,0xe1,0xa2,0x32,0xb0,0xad,0x31,0x68,0x20",
  "0xe1,0x23,0x2c,0x59,0xa5,0x79,0xa9,0x84,0x6d,0x7d,0x6b,0x9e,0x3d,0x6b,0x20,0xa1",
  "0x22,0x0c,0x34,0xeb,0xdf,0x8b,0xff,0xdc,0x3b,0x6b,0xff,0x9a,0xe6,0x5f,0x7b,0x87",
  "0x20,0x90,0x50,0x34,0xeb,0xf5,0xce,0x64,0x7a,0xae,0x9d,0x28,0x87,0x10,0xb6,0xa5",
  "0x68,0x85,0x28,0x35,0x82,0x1c,0x36,0x5a,0x21,0x1c,0x49,0x7c,0xad,0x26,0xc6,0x18",
  "0xe3,0x53,0xb3,0x37,0x11,0xb2,0x67,0xcf,0x1e,0xb2,0x87,0xec,0x21,0x7b,0xc8,0xbe",
  "0x99,0x80,0xe0,0x90,0x3d,0xd3,0x9c,0x8d,0xa7,0xbf,0x26,0xf1,0x96,0x20,0xca,0x0e",
  "0x80,0xa6,0xa8,0x11,0xa9,0x42,0x08,0x19,0x19,0x1a,0x09,0x64,0x44,0x92,0x24,0x49",
  "0x07,0x50,0x02,0x21,0x43,0x76,0x34,0x0f,0x12,0x80,0x00,0x59,0x10,0xc4,0x40,0x9a",
  "0x67,0x94,0x21,0x8c,0x18,0x43,0x8c,0x09,0x66,0x02,0x99,0x48,0x66,0x82,0xd0,0x14",
  "0x14,0x32,0x1c,0x20,0x6c,0x00,0x44,0x1e,0x66,0x08,0x46,0xe2,0xf0,0x14,0x25,0x2b",
  "0x94,0x40,0xf6,0x0e,0x4b,0x04,0x82,0x6e,0x2c,0x08,0xdb,0x04,0x02,0xc3,0x3c,0x62",
  "0xfb,0x17,0x75,0xed,0xc6,0x96,0xeb,0x57,0x1d,0x5a,0x81,0xbd,0x63,0x64,0x1d,0xef",
  "0xf7,0xe0,0xfe,0x02,0xf8,0x13,0xdf,0x11,0xc9,0x81,0xe6,0xdd,0x24,0x54,0x84,0xed",
  "0x19,0x2c,0xcf,0x4f,0x00,0x1b,0xe7,0xcf,0xee,0x9a,0xce,0x7b,0x80,0x88,0x2f,0xc1",
  "0x5d,0xa5,0x26,0xd3,0x80,0xbc,0xa6,0x5d,0x89,0x28,0xd0,0x5d,0xed,0x21,0x5e,0x3f",
  "0x1d,0x1a,0x9c,0xbe,0x87,0x5b,0x12,0x0a,0x1e,0x2f,0x28,0x07,0x24,0x6c,0xe7,0xcf",
  "0x44,0x73,0x59,0xb1,0xbe,0x0c,0x0f,0x1a,0xb5,0x43,0x06,0xd3,0x32,0x18,0x56,0xc5",
  "0x96,0x6c,0xf0,0x6b,0x9f,0x4f,0xfa,0xb0,0xed,0x46,0x14,0xa8,0xc3,0x42,0xb0,0xf7",
  "0xd1,0xfd,0x3d,0x1d,0xf2,0xef,0x28,0x11,0x08,0x5f,0xa3,0x7f,0xef,0x7d,0xd4,0xde",
  "0xf3,0x2c,0xef,0xc4,0x57,0xa9,0x1d,0xc1,0xeb,0x6c,0xd4,0xdc,0xb8,0xe2,0xf0,0xfb",
  "0x6e,0x53,0xcc,0x1e,0x26,0x73,0x03,0x22,0x60,0xda,0x2c,0x19,0x22,0x7a,0x08,0xd4",
  "0x58,0x5a,0xb9,0x15,0x20,0xea,0x73,0x10,0x7c,0xf0,0x6f,0xa6,0xf6,0xa3,0xee,0xfe",
  "0x15,0x6d,0x08,0x4a,0x03,0x92,0xc7,0xa1,0x73,0x48,0x9b,0x3f,0x0f,0x14,0xf3,0x38",
  "0x55,0x4d,0xe1,0x34,0x8e,0xbb,0xb8,0x48,0x6c,0x48,0x46,0x9a,0xe6,0xa1,0x30,0x26",
  "0x28,0xeb,0x5a,0x59,0x99,0xe5,0x80,0x8f,0x30,0x67,0x93,0x23,0x7b,0xf9,0xdf,0x61",
  "0xb1,0x42,0xf5,0x05,0x2e,0x15,0x98,0x59,0x67,0xce,0x1b,0x65,0x1e,0x25,0xc4,0xc7",
  "0x29,0x86,0x59,0xc3,0xc8,0x5d,0xc5,0x40,0x00,0x60,0x8d,0x0b,0x95,0x35,0xa0,0x93",
  "0x2e,0x54,0x5d,0x10,0xda,0x18,0xec,0x4d,0x54,0xc0,0x3f,0xa7,0xa5,0xdb,0x71,0x4d",
  "0xca,0x29,0x7f,0xfc,0xb9,0x33,0x95,0x63,0xe2,0x2b,0xbf,0xb4,0x02,0x6d,0x0f,0xd0",
  "0xb0,0xd4,0x3a,0xf4,0x75,0x4a,0x9e,0xc6,0x16,0xe4,0xe3,0x96,0xfb,0x8d,0x25,0x5c",
  "0x01,0x16,0xfc,0x5c,0x8a,0xb2,0x03,0xbc,0xf7,0xab,0x5c,0x94,0x7d,0x2f,0x4a,0x80",
  "0xa1,0x78,0x83,0xa2,0x21,0x18,0xf1,0xe0,0xc5,0x48,0xfe,0x33,0x38,0x9b,0x85,0xa3",
  "0x52,0x91,0x41,0x77,0x6e,0x74,0xac,0x0a",
];

const hexDump1 = [
  "0xc4,0x01,0x00,0x14,0x03,0x3b,0x32,0x39,0x12,0x37,0x0a,0x01,0x30,0x12,0x32,0x0a",
  "0x01,0x30,0x12,0x0a,0x08,0x00,0x10,0x00,0x18,0x80,0x1e,0x20,0xf0,0x10,0x18,0x01",
  "0x22,0x2a,0x06,0x08,0x80,0x1e,0x10,0xf0,0x10,0x35,0x00,0x00,0x80,0x3f,0x42,0x02",
  "0x08,0x01,0x4a,0x02,0x08,0x02,0x01,0x00,0x84,0x31,0x9d",
];

const hexDump2 = [
  "0xc8,0x01,0x00,0x38,0x32,0x36,0x22,0x34,0x12,0x32,0x08,0x04,0x12,0x2e,0x56,0x69",
  "0x72,0x74,0x75,0x61,0x6c,0x20,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x20,0x6e,0x6f",
  "0x74,0x20,0x61,0x76,0x61,0x69,0x6c,0x61,0x62,0x6c,0x65,0x20,0x69,0x6e,0x20,0x6c",
  "0x6f,0x67,0x69,0x6e,0x20,0x73,0x65,0x73,0x73,0x69,0x6f,0x6e",
];

// const compressedArray = hexStringToUint8Array(hexDump0);
// decompressArray(compressedArray, "decompressed_output0.bin");
//
async function decompressTest() {
  ZstdCodec.run((zstd) => {
    try {
      // Initialize the streaming object
      const streaming = new zstd.Streaming();

      // Prepare compressed data
      const compressedArray0 = hexStringToUint8Array(hexDump1_0);
      const compressedArray1 = hexStringToUint8Array(hexDump1_1);

      // Decompress the data
      const decompressedArray0 = streaming.decompress(compressedArray0);
      console.log("Decompressed data 0:", decompressedArray0);

      const decompressedArray1 = streaming.decompress(compressedArray1);
      console.log("Decompressed data 1:", decompressedArray1);

      // Further processing if needed
    } catch (error) {
      console.error("Error during decompression process:", error);
    }
  });
}

decompressTest()
  .then(() => {
    console.log("successfully");
  })
  .catch((error) => {
    console.log(error);
  });
