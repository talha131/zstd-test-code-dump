import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { createRequire } from "module";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(import.meta.url);

const hexDump0 = [
  `
0x28, 0xb5, 0x2f, 0xfd, 0x00, 0x58, 0xd4, 0x2d, 0x00, 0xaa, 0x57, 0x30, 0x10, 0x33, 0x20, 0x6d, 0x9b, 0x07, 0x24, 0xba, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x8c, 0x52, 0xf8, 0xa8, 0xe0, 0x84, 0xa9, 0xbb, 0xa7, 0x12, 0x6f, 0x34, 0x41, 0x9f, 0xc7, 0xc5, 0x0a, 0x0f, 0xaf, 0xf0, 0x55, 0xe8, 0x5f, 0xc9, 0xba, 0x88, 0x91, 0x22, 0x96, 0x29, 0xb0, 0xfe, 0xcd, 0x6c, 0x05, 0x11, 0x84, 0x85, 0x54, 0x57, 0xf9, 0x00, 0xf6, 0x00, 0xf1, 0x00, 0x8c, 0x94, 0x1e, 0x19, 0x6c, 0x8f, 0x41, 0x07, 0xbe, 0x7b, 0xf8, 0x10, 0xb6, 0xd7, 0x9c, 0x7b, 0x86, 0x39, 0x8c, 0x03, 0x9f, 0x69, 0xf2, 0x3d, 0x3a, 0xd0, 0xc9, 0x6f, 0xed, 0x41, 0xf9, 0xb0, 0xc5, 0x77, 0xe8, 0xae, 0x0a, 0xb9, 0xaa, 0x6c, 0x4b, 0x39, 0xcb, 0x96, 0xb2, 0x13, 0xdf, 0xba, 0xb2, 0x70, 0x7c, 0xd9, 0xfe, 0x9c, 0xe6, 0x35, 0xce, 0x9a, 0xc6, 0x34, 0x86, 0x31, 0xec, 0xbd, 0x69, 0x8d, 0xc1, 0xd6, 0xda, 0x37, 0xc7, 0x10, 0xc5, 0xdf, 0x1f, 0x74, 0xdc, 0x7b, 0x0f, 0x36, 0x6d, 0xda, 0x4d, 0xa1, 0x0b, 0x51, 0xb4, 0x4a, 0x86, 0x31, 0x90, 0x35, 0x06, 0xc2, 0xa7, 0x32, 0x1a, 0x92, 0xa5, 0x28, 0x6a, 0x51, 0xe9, 0xa6, 0xd0, 0xaa, 0x3b, 0x57, 0xd8, 0x8a, 0x4b, 0x28, 0x20, 0x13, 0x8e, 0x89, 0x04, 0x14, 0x11, 0x87, 0x24, 0xf2, 0xc0, 0x5f, 0x8b, 0xef, 0x9d, 0xaa, 0xee, 0xa6, 0xf5, 0x4a, 0x18, 0xd3, 0x67, 0x62, 0x34, 0x26, 0x14, 0x44, 0xf0, 0x59, 0xef, 0xa6, 0xe8, 0x64, 0xf5, 0x82, 0xae, 0x9e, 0x1e, 0xca, 0x68, 0x40, 0xd6, 0x72, 0xa7, 0x55, 0xa9, 0x24, 0x89, 0x2e, 0x4c, 0xa7, 0x6d, 0xb1, 0x0f, 0x65, 0x34, 0x9a, 0xbf, 0x33, 0x8f, 0x48, 0x10, 0x59, 0xf0, 0xa0, 0xc0, 0xc4, 0x94, 0x2a, 0x4f, 0x1e, 0xca, 0x68, 0x30, 0x67, 0xcf, 0x66, 0x34, 0xd6, 0xa3, 0x19, 0x8d, 0x67, 0x18, 0xc3, 0x98, 0xd8, 0xde, 0x9d, 0x04, 0x81, 0x2f, 0x40, 0xe0, 0x8d, 0x47, 0xf7, 0x9c, 0x83, 0x4e, 0xb6, 0x67, 0x12, 0xca, 0xc6, 0x62, 0xf3, 0xf5, 0x54, 0x8c, 0x06, 0x7b, 0x2e, 0x1e, 0x30, 0x08, 0xc8, 0x36, 0x8a, 0xaa, 0x00, 0x8c, 0x87, 0x0c, 0x8c, 0x07, 0x0d, 0x0f, 0x1b, 0x18, 0x0f, 0x1c, 0x2a, 0x1e, 0x3a, 0x04, 0x13, 0x09, 0x28, 0xa4, 0x57, 0x16, 0xba, 0x17, 0xcf, 0xc4, 0x68, 0x38, 0xf7, 0x0d, 0xb6, 0x69, 0x2f, 0x5c, 0xbd, 0xec, 0x84, 0x6a, 0x6d, 0xa7, 0x65, 0xa1, 0x13, 0x63, 0x6f, 0xee, 0x5c, 0xe1, 0x85, 0x77, 0xd5, 0x13, 0xba, 0x5a, 0x53, 0xbc, 0x2b, 0x9d, 0x98, 0xb2, 0xad, 0x7e, 0x28, 0xa3, 0xd1, 0xc8, 0xf9, 0x70, 0x66, 0x8b, 0x4c, 0xc7, 0xcd, 0x88, 0x38, 0x5b, 0x64, 0x3e, 0x22, 0x53, 0x3e, 0xe6, 0x43, 0x4e, 0x88, 0x9b, 0x10, 0x89, 0xf9, 0x70, 0xa6, 0x74, 0x05, 0xdc, 0x74, 0x90, 0xd9, 0x3c, 0x26, 0x64, 0x53, 0x46, 0xe6, 0x37, 0xf3, 0xb5, 0x19, 0x89, 0xcc, 0x08, 0x64, 0x42, 0x37, 0x9d, 0x88, 0xf9, 0x20, 0x93, 0x45, 0x66, 0x01, 0x37, 0x23, 0x9c, 0x50, 0x62, 0x3a, 0x12, 0x53, 0x36, 0x87, 0xaf, 0x2d, 0x6a, 0xa1, 0xe7, 0xa6, 0x6e, 0xc6, 0xd9, 0x4e, 0xa8, 0x1b, 0x3d, 0x94, 0xd1, 0xb0, 0x52, 0x85, 0x7a, 0xf3, 0x9e, 0x9a, 0xaa, 0xee, 0xc6, 0xd5, 0x03, 0x03, 0x0a, 0x1a, 0x49, 0xc3, 0x08, 0x24, 0x12, 0x9e, 0x04, 0x2a, 0x43, 0x24, 0x8b, 0x06, 0x09, 0xa2, 0x03, 0x47, 0x21, 0x99, 0x50, 0x05, 0xc3, 0x66, 0x80, 0x62, 0x4e, 0x68, 0x8e, 0x28, 0xcb, 0xd6, 0x7b, 0xa1, 0x92, 0xcd, 0x8e, 0x2f, 0x3b, 0xb2, 0x06, 0x1d, 0xe7, 0x5d, 0x93, 0xdf, 0xde, 0x79, 0xf9, 0xee, 0x5f, 0xba, 0x6f, 0xd8, 0x3b, 0x0e, 0x7c, 0x2c, 0x36, 0xf6, 0xe2, 0x6a, 0x4d, 0xb1, 0x5b, 0x7c, 0xd9, 0xb8, 0xee, 0xe8, 0x1c, 0x73, 0x9a, 0xf3, 0xef, 0x1d, 0xd7, 0x2d, 0xe1, 0x73, 0x1c, 0x84, 0xcc, 0xed, 0x5c, 0xe1, 0x9c, 0x21, 0x88, 0x66, 0xb7, 0x48, 0x51, 0xd6, 0xaf, 0xbd, 0xcb, 0x67, 0xa2, 0x63, 0xa0, 0x6b, 0x01, 0x3b, 0x3b, 0xbc, 0x12, 0xf6, 0x0a, 0x95, 0x52, 0xf9, 0x46, 0x3e, 0xd5, 0x5a, 0x6b, 0xc5, 0x64, 0xf3, 0x9a, 0x54, 0xd5, 0xc4, 0x5f, 0x33, 0x2b, 0xa2, 0x85, 0xeb, 0xce, 0x4c, 0x3a, 0x1e, 0xc2, 0xc3, 0x5f, 0x83, 0x77, 0xbe, 0x70, 0x75, 0xb6, 0x50, 0xa6, 0x85, 0xab, 0x5d, 0x41, 0x5b, 0xc8, 0xd7, 0xbc, 0x48, 0x54, 0x05, 0x51, 0x56, 0x2f, 0xc8, 0xe6, 0x4b, 0xb1, 0xfd, 0x35, 0x51, 0x9b, 0xb7, 0x5e, 0x78, 0x67, 0xf6, 0xd0, 0x9d, 0xa6, 0xb6, 0x90, 0x96, 0x95, 0x62, 0xbd, 0x72, 0x25, 0x55, 0xd5, 0x99, 0x50, 0x77, 0xba, 0x3b, 0xe2, 0xcb, 0x5e, 0x9b, 0xb2, 0x9b, 0xaa, 0x2a, 0xbc, 0x50, 0xc9, 0x42, 0x6b, 0x53, 0xaa, 0x0b, 0x95, 0xf0, 0x63, 0x4b, 0x53, 0xd5, 0xd5, 0x94, 0xdd, 0x16, 0xbb, 0x6a, 0x5d, 0x16, 0xba, 0x95, 0xb5, 0x73, 0x85, 0x35, 0x45, 0xf3, 0x5e, 0x9b, 0xd6, 0x29, 0xaf, 0x6c, 0x27, 0xa9, 0xb2, 0x58, 0x3b, 0xa2, 0x19, 0x72, 0x40, 0x37, 0xda, 0xf6, 0xba, 0x4d, 0xd9, 0x9b, 0xab, 0x35, 0x31, 0x9e, 0x34, 0x8d, 0x9d, 0xee, 0x5e, 0x10, 0x65, 0xf5, 0xd2, 0x15, 0xd4, 0xe1, 0xd0, 0x9b, 0xb2, 0xd3, 0xcd, 0x16, 0x5b, 0xac, 0x63, 0x92, 0x2b, 0x86, 0xa9, 0x54, 0x2a, 0x0e, 0xc7, 0xc4, 0x7b, 0x5b, 0x78, 0x9b, 0xdb, 0xea, 0x28, 0xaa, 0xf6, 0xdc, 0x16, 0x9b, 0x21, 0x8b, 0x85, 0x77, 0x9e, 0x7a, 0xa2, 0x99, 0xe2, 0x19, 0x6d, 0x7b, 0x27, 0x95, 0x29, 0xfe, 0xf3, 0xe5, 0xc4, 0x75, 0x67, 0x16, 0x1b, 0x67, 0xec, 0x5d, 0x4a, 0x77, 0xa4, 0xc3, 0xf6, 0x1e, 0xdb, 0x3b, 0x6c, 0xfc, 0x35, 0x2e, 0x21, 0x81, 0xf0, 0x98, 0x70, 0x48, 0x28, 0x1c, 0x38, 0x02, 0x00, 0x06, 0xc4, 0xe6, 0x39, 0x12, 0xbe, 0x13, 0x37, 0x65, 0x2f, 0xec, 0xb2, 0x54, 0x65, 0x81, 0xad, 0x64, 0xb7, 0xb3, 0xff, 0xd7, 0x44, 0x88, 0x07, 0xe1, 0x60, 0x74, 0xa2, 0x74, 0x13, 0x85, 0x22, 0xd0, 0x1e, 0x4d, 0x01, 0xb2, 0x12, 0xa6, 0x54, 0x95, 0xc0, 0x83, 0x68, 0x20, 0x1a, 0xc4, 0x43, 0x38, 0x08, 0xf6, 0x4c, 0xa8, 0x8b, 0x31, 0x9d, 0x28, 0x38, 0x94, 0xf0, 0x6e, 0x89, 0x32, 0x39, 0x94, 0xff, 0x8e, 0xff, 0xf7, 0x06, 0x36, 0xf0, 0x9f, 0x6a, 0x23, 0x88, 0xa2, 0x15, 0xd4, 0xb5, 0x9a, 0x42, 0x80, 0xfd, 0x63, 0xa7, 0xbb, 0x31, 0x75, 0x27, 0xff, 0xff, 0xff, 0x9f, 0x15, 0x51, 0x73, 0x30, 0xc6, 0x1c, 0xe7, 0xd0, 0x14, 0x5c, 0xf9, 0xff, 0x4b, 0xf6, 0xc2, 0x4a, 0x6b, 0xd5, 0xac, 0x5d, 0x63, 0xff, 0x1e, 0xa5, 0x43, 0xe9, 0x0d, 0xf4, 0xff, 0xbf, 0x10, 0x85, 0x3e, 0xd3, 0xac, 0x59, 0x6b, 0x05, 0x10, 0x0b, 0x11, 0x2e, 0x0c, 0x58, 0xa0, 0x78, 0x30, 0xb0, 0x93, 0x09, 0x97, 0x03, 0xd5, 0xb4, 0x13, 0xa5, 0xea, 0x6c, 0xef, 0xc5, 0xe8, 0xb0, 0xc8, 0x9a, 0x03, 0x89, 0x05, 0x89, 0x68, 0xe2, 0x73, 0xa0, 0x64, 0x8f, 0x39, 0x67, 0xcd, 0x79, 0x0c, 0xb6, 0xa6, 0x39, 0x8f, 0x20, 0x90, 0x58, 0x35, 0x6b, 0xf6, 0x4f, 0xa5, 0x82, 0xa8, 0x5b, 0x59, 0x1e, 0x63, 0x6c, 0xd8, 0xaa, 0x36, 0xb2, 0x58, 0x29, 0xf2, 0xd8, 0x54, 0x1b, 0x61, 0x89, 0xe2, 0x8c, 0x39, 0x52, 0x4a, 0x29, 0x21, 0x9b, 0xdd, 0x91, 0xb1, 0x7d, 0xfb, 0xf6, 0xb1, 0x7d, 0x6c, 0x1f, 0xdb, 0xc7, 0xf6, 0x8e, 0x04, 0x82, 0xc7, 0xf6, 0xaf, 0x79, 0x36, 0xa6, 0x0e, 0x9b, 0x89, 0xf7, 0x14, 0x59, 0x02, 0x80, 0xa7, 0xa8, 0x01, 0xa9, 0x42, 0x08, 0x19, 0x32, 0x44, 0x12, 0xc8, 0x88, 0x24, 0x49, 0x92, 0x0e, 0x60, 0x02, 0x91, 0xa1, 0x3a, 0x9a, 0x07, 0x12, 0xa0, 0xf0, 0x58, 0x10, 0xa4, 0x40, 0x1a, 0x47, 0x90, 0x22, 0x8c, 0x18, 0x43, 0x8c, 0x11, 0xcc, 0x04, 0x33, 0xd1, 0xcc, 0x04, 0x21, 0x2d, 0x28, 0x64, 0x38, 0x20, 0x6c, 0x00, 0x44, 0x26, 0xe6, 0x31, 0x02, 0x61, 0x47, 0x1f, 0xc6, 0x5a, 0x28, 0x8f, 0xc2, 0xa5, 0x48, 0xc4, 0x4b, 0x9e, 0x59, 0x8b, 0x6c, 0x02, 0x75, 0x60, 0xbe, 0xaa, 0xf1, 0x17, 0x5d, 0xea, 0xc6, 0x26, 0xe2, 0x55, 0x9d, 0x59, 0x5b, 0x76, 0x62, 0xc4, 0x85, 0x9f, 0xe3, 0x20, 0xe6, 0x53, 0xf2, 0x20, 0xbe, 0xa3, 0x9b, 0x03, 0x75, 0x70, 0x93, 0x20, 0x11, 0xf6, 0x32, 0xf2, 0xfc, 0x61, 0x00, 0xe4, 0x22, 0x7f, 0x12, 0xdd, 0x74, 0xce, 0x43, 0x44, 0x3c, 0xd9, 0xee, 0x22, 0x5d, 0xb2, 0x28, 0xcb, 0x4b, 0xac, 0x24, 0x59, 0x81, 0xee, 0x6c, 0x0f, 0xf1, 0x64, 0xe6, 0xb9, 0x89, 0x46, 0x0d, 0x77, 0x1f, 0x47, 0xcd, 0x5c, 0x94, 0xd0, 0x24, 0xac, 0xe2, 0xcf, 0x98, 0x66, 0x16, 0x60, 0x22, 0xc2, 0x1b, 0xa3, 0xda, 0x3d, 0xca, 0xb4, 0xba, 0xcc, 0xaa, 0x82, 0x00, 0x3d, 0x06, 0xbf, 0xcf, 0x27, 0x7d, 0xd8, 0xd9, 0x72, 0x2c, 0x6a, 0x38, 0x0b, 0x25, 0xfb, 0x48, 0x5c, 0xe2, 0xdf, 0x37, 0x16, 0x79, 0x12, 0xf9, 0xf0, 0xf5, 0xc5, 0x6f, 0xa9, 0x0f, 0x1e, 0x7b, 0x6e, 0xf0, 0x8e, 0xbf, 0x72, 0xec, 0x40, 0x5e, 0x67, 0x90, 0xe6, 0x96, 0x14, 0x87, 0xcc, 0x77, 0x1b, 0x35, 0x76, 0x0d, 0x6c, 0x1b, 0xfc, 0xad, 0x85, 0x06, 0x33, 0x52, 0x7b, 0x24, 0xd4, 0x58, 0x5e, 0xb8, 0x00, 0x90, 0xd8, 0xe7, 0x98, 0x71, 0xf1, 0x6f, 0x1f, 0xeb, 0xf5, 0xee, 0x6e, 0x9b, 0x36, 0x44, 0x0a, 0x03, 0x52, 0xf0, 0xb1, 0x00, 0x48, 0x60, 0xff, 0x0e, 0x68, 0x2f, 0x4d, 0xab, 0x46, 0xc1, 0xbe, 0x8e, 0x0b, 0x7d, 0xc3, 0x84, 0xc0, 0xe7, 0xa1, 0xe8, 0x26, 0x20, 0xeb, 0xba, 0x5e, 0xe1, 0x8c, 0xf6, 0x1d, 0x61, 0x64, 0x5c, 0x4c, 0xf6, 0xe9, 0xbf, 0xea, 0x62, 0x5d, 0xea, 0x10, 0x5a, 0xaa, 0x9b, 0x59, 0x4c, 0x1e, 0xda, 0x4a, 0x22, 0x4a, 0xa4, 0x4f, 0x53, 0x13, 0xb3, 0x85, 0xad, 0xb3, 0x6a, 0x82, 0x36, 0x61, 0x8d, 0x53, 0x8d, 0xa1, 0x98, 0x93, 0x4d, 0x34, 0xa4, 0x40, 0x76, 0x07, 0xd6, 0xff, 0x29, 0x7d, 0x7f, 0xa7, 0x85, 0xdc, 0x70, 0x9f, 0x94, 0x4b, 0xfe, 0xf1, 0x73, 0x06, 0x95, 0xd3, 0xec, 0x0b, 0x92, 0xed, 0xff, 0xc0, 0x58, 0xb6, 0x80, 0x6c, 0x4f, 0xb5, 0x65, 0x21, 0xf0, 0x90, 0x99, 0x28, 0x79, 0x1a, 0x5b, 0x90, 0x8c, 0x5e, 0x59, 0x82, 0x2c, 0xe5, 0x02, 0x4c, 0xe5, 0xb9, 0x84, 0x20, 0xb7, 0x04, 0x1d, 0x4d, 0x94, 0x87, 0x17, 0x05, 0x88, 0x19, 0x86, 0x11, 0x68, 0xa0, 0x65, 0x3c, 0x05, 0x18, 0x5e, 0xb4, 0xf2, 0x93, 0x41, 0xb2, 0x59, 0x38, 0x96, 0x8a, 0x70, 0x4f, 0x73, 0xa3, 0xf3, 0x55
`,

  `
0xc4, 0x01, 0x00, 0x14, 0x03, 0x3b, 0x32, 0x39, 0x12, 0x37, 0x0a, 0x01, 0x30, 0x12, 0x32, 0x0a, 0x01, 0x30, 0x12, 0x0a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x80, 0x08, 0x20, 0x80, 0x06, 0x18, 0x01, 0x22, 0x2a, 0x06, 0x08, 0x80, 0x08, 0x10, 0x80, 0x06, 0x35, 0x00, 0x00, 0x80, 0x3f, 0x42, 0x02, 0x08, 0x01, 0x4a, 0x02, 0x08, 0x02, 0x01, 0x00, 0x84, 0x31, 0x9d
`,
];

const hexDump1 = [
  `
0x28, 0xb5, 0x2f, 0xfd, 0x00, 0x58, 0xc4, 0x01, 0x00, 0x14, 0x03, 0x3b, 0x32, 0x39, 0x12, 0x37, 
0x0a, 0x01, 0x30, 0x12, 0x32, 0x0a, 0x01, 0x30, 0x12, 0x0a, 0x08, 0x00, 0x10, 0x00, 0x18, 0x80, 
0x08, 0x20, 0x80, 0x06, 0x18, 0x01, 0x22, 0x2a, 0x06, 0x08, 0x80, 0x08, 0x10, 0x80, 0x06, 0x35, 
0x00, 0x00, 0x80, 0x3f, 0x42, 0x02, 0x08, 0x01, 0x4a, 0x02, 0x08, 0x02, 0x01, 0x00, 0x84, 0x31, 
0x9d
`,
  `
0x98, 0x00, 0x00, 0x12, 0x32, 0x10, 0x1a, 0x0e, 0x0a, 0x0c, 0x0a, 0x08, 0x36, 0x38, 0x36, 0x39, 
0x31, 0x35, 0x64, 0x61, 0x18, 0x01
`,
  `
0xec, 0x07, 0x00, 0x62, 0x09, 0x22, 0x2c, 0x80, 0xb7, 0x69, 0x0c, 0x80, 0x8d, 0xc3, 0x7c, 0x0a, 
0x76, 0x8f, 0x52, 0x25, 0xa7, 0xa3, 0x15, 0xde, 0xa2, 0xd7, 0x9e, 0xd6, 0xb8, 0x09, 0x2b, 0xc0, 
0x88, 0xe2, 0xc6, 0x10, 0x88, 0xa9, 0x21, 0x00, 0xcc, 0xe7, 0x85, 0x60, 0xb6, 0xfd, 0xdd, 0x2e, 
0xfd, 0x32, 0x05, 0x8c, 0x4d, 0x7c, 0x7b, 0xac, 0x6e, 0xfa, 0x07, 0xdf, 0x40, 0xf0, 0x31, 0x52, 
0x05, 0x31, 0x52, 0x93, 0x7c, 0x05, 0x5a, 0x9d, 0xb3, 0xbe, 0x28, 0x1a, 0x70, 0x56, 0xe9, 0x9f, 
0xf4, 0xaf, 0x59, 0xdb, 0x62, 0x3d, 0x3c, 0x02, 0xce, 0x23, 0x5f, 0x99, 0x52, 0x66, 0xd0, 0xea, 
0xa4, 0xcc, 0xaa, 0xca, 0xe0, 0xba, 0x0e, 0x30, 0x0c, 0x21, 0x41, 0x61, 0x61, 0xce, 0x39, 0xad, 
0x7f, 0xd0, 0xea, 0xac, 0x7f, 0x37, 0x6b, 0xb3, 0xfe, 0x6d, 0x03, 0xea, 0xb2, 0xcb, 0x26, 0x0d, 
0xb1, 0x0e, 0xf8, 0x72, 0xd2, 0x98, 0x85, 0x30, 0x1b, 0x81, 0x0b, 0xa0, 0xd8, 0x80, 0x37, 0x20, 
0x70, 0xc3, 0x82, 0x24, 0xcd, 0x01, 0x61, 0xfe, 0xf0, 0x26, 0xc0, 0xdb, 0x34, 0x5c, 0x40, 0x41, 
0xe9, 0x87, 0x19, 0x08, 0xa0, 0x34, 0xe4, 0x5c, 0x36, 0xf6, 0x60, 0x16, 0x06, 0x4f, 0x8e, 0xe7, 
0x01, 0x0d, 0x51, 0x24, 0xad, 0x4e, 0x80, 0xcc, 0x61, 0x00, 0x02, 0x04, 0xe8, 0x41, 0xe4, 0x6e, 
0x3f, 0xfe, 0xbd, 0x61, 0x68, 0xd0, 0x37, 0xa4, 0x5f, 0xcf, 0x9b, 0xc2, 0x10, 0x29, 0xa6, 0x0f, 
0xe8, 0xb1, 0x42, 0x24, 0xb0, 0x19, 0x16, 0xe0, 0x40, 0xcf, 0x58, 0xf0, 0x18, 0xe0, 0x1b, 0x4d, 
0xc3, 0x40, 0x99, 0x02, 0x08, 0x69, 0x0a, 0x34, 0xb4, 0x29, 0x20, 0x10, 0xa7, 0xc0, 0x41, 0x9d, 
0x09, 0x06, 0x5f, 0x50, 0x41, 0xca, 0xeb, 0xa1, 0x53, 0x1e, 0x25, 0x26, 0xa7, 0x30, 0xf2, 0x02
`,
  `
0x78, 0x03, 0x00, 0x6e, 0x42, 0x6c, 0x0a, 0x40, 0x1a, 0x3e, 0x08, 0xab, 0xf6, 0x9b, 0xf5, 0x06, 
0x12, 0x0c, 0x08, 0x83, 0x04, 0x10, 0xce, 0x91, 0x02, 0x18, 0x87, 0x1c, 0x20, 0x15, 0x1a, 0x0c, 
0x08, 0xf7, 0x01, 0x10, 0xd3, 0xd4, 0x08, 0x18, 0xe8, 0x57, 0x20, 0x15, 0x22, 0x08, 0x08, 0x14, 
0x10, 0x3f, 0x18, 0x20, 0x20, 0x15, 0x2a, 0x08, 0x08, 0x3f, 0x10, 0x3f, 0x18, 0x3f, 0x20, 0x15, 
0x32, 0x00, 0x3a, 0x00, 0x42, 0x00, 0x4a, 0x00, 0x12, 0x28, 0x12, 0x08, 0x08, 0x00, 0x10, 0x11, 
0x18, 0x0d, 0x20, 0x08, 0x1a, 0x08, 0x08, 0x00, 0x10, 0x01, 0x18, 0x01, 0x20, 0x08, 0x22, 0x08, 
0x08, 0x00, 0x10, 0x02, 0x18, 0x01, 0x20, 0x07, 0x2a, 0x08, 0x08, 0x10, 0x10, 0x24, 0x18, 0x16, 
0x20, 0x07,
`,
  `
0xd4, 0x03, 0x00, 0xd2, 0x86, 0x19, 0x23, 0xa0, 0x29, 0x1d, 0x13, 0xa9, 0xa8, 0xaf, 0xaa, 0x13, 
0x9e, 0x04, 0x61, 0x0a, 0x8c, 0x88, 0xbd, 0xb8, 0x71, 0xe9, 0x95, 0xf2, 0x71, 0x03, 0x48, 0x9b, 
0x22, 0x04, 0xde, 0xf8, 0xf3, 0xff, 0xd6, 0x88, 0xdc, 0x01, 0xba, 0xeb, 0x9b, 0x02, 0x9b, 0xa1, 
0x23, 0x5d, 0xf5, 0x5c, 0xb6, 0xbd, 0x65, 0xb3, 0x11, 0xb8, 0xec, 0x9d, 0xbd, 0x64, 0xcf, 0xc9, 
0xc1, 0x45, 0x47, 0x07, 0x5c, 0x77, 0x97, 0xce, 0x36, 0xa8, 0x6e, 0xf3, 0x26, 0x19, 0xbb, 0xa0, 
0x1b, 0x78, 0x9e, 0x90, 0xc4, 0x89, 0xd3, 0xd2, 0x55, 0x8f, 0x27, 0x2a, 0x09, 0x88, 0x38, 0x31, 
0x03, 0xc9, 0x43, 0x61, 0x58, 0xb1, 0x16, 0x04, 0x6c, 0x38, 0xe8, 0x08, 0x06, 0x00, 0xad, 0x04, 
0x58, 0x68, 0x03, 0x84, 0xa6, 0x62, 0xd2, 0x81, 0x4d, 0x23, 0x17, 0x01, 0x0a
`,
  `
0xc4, 0x02, 0x00, 0x24, 0x04, 0x91, 0x01, 0x42, 0x8e, 0x01, 0x0a, 0x62, 0x1a, 0x60, 0x08, 0xf5, 
0x85, 0x9c, 0xd5, 0x03, 0x10, 0xc8, 0xab, 0x01, 0x18, 0xe6, 0x0e, 0x20, 0x13, 0x1a, 0x0b, 0x08, 
0xf5, 0x01, 0x10, 0xdc, 0x05, 0x18, 0xde, 0x02, 0x20, 0x13, 0x12, 0x18, 0x12, 0x20, 0x13, 0x13, 
0x32, 0x08, 0x08, 0x76, 0x10, 0x76, 0x18, 0x76, 0x01, 0x0f, 0x10, 0x10, 0x18, 0x10, 0x20, 0x13, 
0x13, 0x13, 0x20, 0x18, 0x19, 0x20, 0x13, 0x08, 0x00, 0x28, 0x4b, 0x08, 0x28, 0x17, 0x94, 0x81, 
0xeb, 0x02, 0x77, 0xa0, 0x34, 0x16, 0xbb, 0xd1, 0xa0, 0x5d, 0x5f
`,
  `
0x5c, 0x02, 0x00, 0xc4, 0x03, 0x90, 0xd7, 0x8d, 0x9c, 0xc0, 0x04, 0x10, 0xc0, 0x04, 0x18, 0xc0, 
0x04, 0x20, 0x01, 0x1a, 0x0b, 0x08, 0xf3, 0x06, 0x10, 0xf3, 0x06, 0x18, 0xf3, 0x06, 0x20, 0x01, 
0x12, 0x18, 0x12, 0x20, 0x01, 0x01, 0x32, 0x08, 0x08, 0x7f, 0x10, 0x7f, 0x18, 0x7f, 0x0f, 0x10, 
0x0f, 0x18, 0x0f, 0x20, 0x01, 0x01, 0x01, 0x2a, 0x08, 0x08, 0x15, 0x10, 0x15, 0x18, 0x15, 0x20, 
0x01, 0x07, 0x10, 0x00, 0x45, 0x14, 0x66, 0x39, 0xaa, 0xb7, 0x26, 0xa6, 0xb8, 0x02
`,
  `
0x74, 0x01, 0x00, 0xf0, 0xc5, 0x95, 0xa0, 0x04, 0x10, 0xa0, 0x04, 0x18, 0xa0, 0xed, 0x03, 0x10, 
0xed, 0x03, 0x18, 0xed, 0x03, 0x77, 0x10, 0x77, 0x18, 0x77, 0x01, 0x10, 0x10, 0x10, 0x18, 0x10, 
0x20, 0x01, 0x06, 0x00, 0x00, 0x29, 0x80, 0xa3, 0xc1, 0xe2, 0x60, 0x18, 0x18, 0x58, 0xd9, 0x4c, 
0x10
`,
];

function hexStringToUint8Array(hexString: string): Uint8Array {
  // Remove whitespace, newlines, and backticks
  const cleanedHexString = hexString.replace(/[\s`]/g, "");

  // Split the string by commas and remove the "0x" prefix
  const hexValues = cleanedHexString
    .split(",")
    .map((hex) => hex.replace("0x", ""));

  // Convert hex values to numbers and create Uint8Array
  const uint8Array = new Uint8Array(hexValues.map((hex) => parseInt(hex, 16)));

  return uint8Array;
}

// Global reference to the loaded ZSTD WebAssembly module
let zstdModule: any;

// Function to load the WASM module
// expects two files in the same directory:
// 1 wasm.js: The Emscripten-generated JavaScript glue code
// 2 wasm.wasm: The WebAssembly binary
async function loadZstdModule() {
  return new Promise((resolve, reject) => {
    const wasmJsPath = path.join(__dirname, "wasm.js");

    // Read the JavaScript loader gen by Emscripten
    const wasmJs = fs.readFileSync(wasmJsPath, "utf8");

    // Create a minimal environment for the Emscripten loader
    // provide content for Warm module
    const Module: any = {
      wasmBinary: fs.readFileSync(path.join(__dirname, "wasm.wasm")),
      onRuntimeInitialized: () => {
        zstdModule = Module;
        resolve(Module);
      },
    };

    // Evaluate the JavaScript loader
    const evalContext = {
      require,
      Module,
      process,
      __filename,
      __dirname,
    };

    const vmContext = require("vm").createContext(evalContext);
    require("vm").runInContext(wasmJs, vmContext);
  });
}

// output of compression
interface ZSTDCompressedResult {
  compressedData: Uint8Array;
  consumed: number; // input bytes consumed
}

// output of decompression
interface ZSTDDecompressedResult {
  decompressedData: Uint8Array;
  consumed: number; // input bytes consumed
}

class ZSTDCompressor {
  private zstdModule: any;
  private cctx: number;
  private inBufferSize: number;
  private outBufferSize: number;
  private inPtr: number;
  private outPtr: number;

  constructor(zstdModule: any, compressionLevel: number = 3) {
    this.zstdModule = zstdModule;
    this.cctx = this.zstdModule._ZSTD_createCStream();

    // Initialize with reasonable buffer sizes
    this.inBufferSize = 32 * 1024; // 32KB
    this.outBufferSize = 128 * 1024; // 128KB - larger for compression

    // Allocate fixed buffers
    this.inPtr = this.zstdModule._malloc(this.inBufferSize);
    this.outPtr = this.zstdModule._malloc(this.outBufferSize);

    const initResult = this.zstdModule._ZSTD_initCStream(
      this.cctx,
      compressionLevel
    );
    if (this.zstdModule._ZSTD_isError(initResult)) {
      throw new Error(
        `Failed to initialize cstream: ${this.zstdModule.UTF8ToString(
          this.zstdModule._ZSTD_getErrorName(initResult)
        )}`
      );
    }
  }

  feed(chunk: Uint8Array, isLastChunk: boolean = false): ZSTDCompressedResult {
    let pos = 0;
    let compressedChunks: Uint8Array[] = [];

    while (pos < chunk.length) {
      // Copy input chunk to input buffer
      const remainingInput = chunk.length - pos;
      const bytesToCopy = Math.min(remainingInput, this.inBufferSize);
      this.zstdModule.HEAPU8.set(
        chunk.subarray(pos, pos + bytesToCopy),
        this.inPtr
      );

      // Setup ZSTD_inBuffer
      const inBufferPtr = this.zstdModule._malloc(12); // size of ZSTD_inBuffer struct
      this.zstdModule.HEAPU32[inBufferPtr >> 2] = this.inPtr; // src
      this.zstdModule.HEAPU32[(inBufferPtr >> 2) + 1] = bytesToCopy; // size
      this.zstdModule.HEAPU32[(inBufferPtr >> 2) + 2] = 0; // pos

      // Setup ZSTD_outBuffer
      const outBufferPtr = this.zstdModule._malloc(12); // size of ZSTD_outBuffer struct
      this.zstdModule.HEAPU32[outBufferPtr >> 2] = this.outPtr; // dst
      this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 1] = this.outBufferSize; // size
      this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 2] = 0; // pos

      try {
        // Compress
        const result =
          isLastChunk && pos + bytesToCopy === chunk.length
            ? this.zstdModule._ZSTD_endStream(this.cctx, outBufferPtr)
            : this.zstdModule._ZSTD_compressStream(
                this.cctx,
                outBufferPtr,
                inBufferPtr
              );

        if (this.zstdModule._ZSTD_isError(result)) {
          throw new Error(
            `Compression failed: ${this.zstdModule.UTF8ToString(
              this.zstdModule._ZSTD_getErrorName(result)
            )}`
          );
        }

        const bytesConsumed = this.zstdModule.HEAPU32[(inBufferPtr >> 2) + 2]; // input pos
        const bytesProduced = this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 2]; // output pos

        if (bytesProduced > 0) {
          const compressed = new Uint8Array(bytesProduced);
          compressed.set(
            this.zstdModule.HEAPU8.subarray(
              this.outPtr,
              this.outPtr + bytesProduced
            )
          );
          compressedChunks.push(compressed);
        }

        pos += bytesConsumed;

        // If this is the end stream and we need more output buffer
        if (isLastChunk && result > 0) {
          continue;
        }
      } finally {
        this.zstdModule._free(inBufferPtr);
        this.zstdModule._free(outBufferPtr);
      }
    }

    // Combine all compressed chunks
    const totalSize = compressedChunks.reduce(
      (sum, chunk) => sum + chunk.length,
      0
    );
    const result = new Uint8Array(totalSize);
    let offset = 0;
    for (const chunk of compressedChunks) {
      result.set(chunk, offset);
      offset += chunk.length;
    }

    return {
      compressedData: result,
      consumed: pos,
    };
  }

  /**
   * Flushes any remaining data and ends the compression stream
   */
  flush(): Uint8Array {
    const outBufferPtr = this.zstdModule._malloc(12);
    this.zstdModule.HEAPU32[outBufferPtr >> 2] = this.outPtr;
    this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 1] = this.outBufferSize;
    this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 2] = 0;

    try {
      const remainingBytes = this.zstdModule._ZSTD_endStream(
        this.cctx,
        outBufferPtr
      );
      if (this.zstdModule._ZSTD_isError(remainingBytes)) {
        throw new Error(
          `Flush failed: ${this.zstdModule.UTF8ToString(
            this.zstdModule._ZSTD_getErrorName(remainingBytes)
          )}`
        );
      }

      const bytesProduced = this.zstdModule.HEAPU32[(outBufferPtr >> 2) + 2];
      if (bytesProduced > 0) {
        const flushData = new Uint8Array(bytesProduced);
        flushData.set(
          this.zstdModule.HEAPU8.subarray(
            this.outPtr,
            this.outPtr + bytesProduced
          )
        );
        return flushData;
      }

      return new Uint8Array(0);
    } finally {
      this.zstdModule._free(outBufferPtr);
    }
  }

  destroy() {
    if (this.cctx) {
      this.zstdModule._ZSTD_freeCStream(this.cctx);
      this.cctx = 0;
    }
    if (this.inPtr) {
      this.zstdModule._free(this.inPtr);
      this.inPtr = 0;
    }
    if (this.outPtr) {
      this.zstdModule._free(this.outPtr);
      this.outPtr = 0;
    }
  }
}
/*
Usage:
 * ```
 * const decompressor = new ZSTDDecompressor(zstdModule);
 * try {
 *   while (hasMoreData) {
 *     const chunk = await getNextChunk();
 *     const result = decompressor.feed(chunk);
 *     processDecompressedData(result.decompressedData);
 *   }
 * } finally {
 *   decompressor.destroy();
 * }
*/
class ZSTDDecompressor {
  private zstdWASMModule: any;
  private dCtxPtr: number;
  private inputBufferSize: number;
  private outBufferSize: number;
  private inputPtrWASMBuffer: number;
  private outPtrWASMBuffer: number;

  constructor(zstdModule: any) {
    this.zstdWASMModule = zstdModule;

    // Create a new decompression stream

    this.dCtxPtr = this.zstdWASMModule._ZSTD_createDStream();

    // Initialize with buffer sizes
    this.inputBufferSize = 32 * 1024; // 32KB
    this.outBufferSize = 128 * 1024; // 128KB

    // Allocate fixed buffers for reuse
    this.inputPtrWASMBuffer = this.zstdWASMModule._malloc(this.inputBufferSize);
    this.outPtrWASMBuffer = this.zstdWASMModule._malloc(this.outBufferSize);

    // Initialize the decompression stream
    const initResult = this.zstdWASMModule._ZSTD_initDStream(this.dCtxPtr);
    if (this.zstdWASMModule._ZSTD_isError(initResult)) {
      throw new Error(
        `Failed to initialize dstream: ${this.zstdWASMModule.UTF8ToString(
          this.zstdWASMModule._ZSTD_getErrorName(initResult)
        )}`
      );
    }
  }

  // can be called multiple times with consecutive chunks of compressed data
  feed(chunk: Uint8Array): ZSTDDecompressedResult {
    let posInInputChunk = 0;
    let decompressedChunks: Uint8Array[] = [];

    // Process input chunk in smaller pieces if it's larger than our buffer

    while (posInInputChunk < chunk.length) {
      // Copy input chunk to input WASMP buffer
      const remainingInput = chunk.length - posInInputChunk;
      const bytesToCopy = Math.min(remainingInput, this.inputBufferSize);
      this.zstdWASMModule.HEAPU8.set(
        chunk.subarray(posInInputChunk, posInInputChunk + bytesToCopy),
        this.inputPtrWASMBuffer
      );

      // Setup ZSTD_inBuffer
      const inBufferPtr = this.zstdWASMModule._malloc(12); // size of ZSTD_inBuffer struct
      this.zstdWASMModule.HEAPU32[inBufferPtr >> 2] = this.inputPtrWASMBuffer; // src
      this.zstdWASMModule.HEAPU32[(inBufferPtr >> 2) + 1] = bytesToCopy; // size
      this.zstdWASMModule.HEAPU32[(inBufferPtr >> 2) + 2] = 0; // pos

      // Setup ZSTD_outBuffer
      const outBufferPtr = this.zstdWASMModule._malloc(12); // size of ZSTD_outBuffer struct
      this.zstdWASMModule.HEAPU32[outBufferPtr >> 2] = this.outPtrWASMBuffer; // dst
      this.zstdWASMModule.HEAPU32[(outBufferPtr >> 2) + 1] = this.outBufferSize; // size
      this.zstdWASMModule.HEAPU32[(outBufferPtr >> 2) + 2] = 0; // pos

      try {
        // Decompress
        const result = this.zstdWASMModule._ZSTD_decompressStream(
          this.dCtxPtr,
          outBufferPtr,
          inBufferPtr
        );

        if (this.zstdWASMModule._ZSTD_isError(result)) {
          throw new Error(
            `Decompression failed: ${this.zstdWASMModule.UTF8ToString(
              this.zstdWASMModule._ZSTD_getErrorName(result)
            )}`
          );
        }

        const bytesConsumed =
          this.zstdWASMModule.HEAPU32[(inBufferPtr >> 2) + 2]; // input pos
        const bytesProduced =
          this.zstdWASMModule.HEAPU32[(outBufferPtr >> 2) + 2]; // output pos

        if (bytesProduced > 0) {
          const decompressed = new Uint8Array(bytesProduced);
          decompressed.set(
            this.zstdWASMModule.HEAPU8.subarray(
              this.outPtrWASMBuffer,
              this.outPtrWASMBuffer + bytesProduced
            )
          );
          decompressedChunks.push(decompressed);
        }

        posInInputChunk += bytesConsumed;
      } finally {
        this.zstdWASMModule._free(inBufferPtr);
        this.zstdWASMModule._free(outBufferPtr);
      }
    }

    // Combine all decompressed chunks
    const totalSize = decompressedChunks.reduce(
      (sum, chunk) => sum + chunk.length,
      0
    );
    const result = new Uint8Array(totalSize);
    let offset = 0;
    for (const chunk of decompressedChunks) {
      result.set(chunk, offset);
      offset += chunk.length;
    }

    return {
      decompressedData: result,
      consumed: posInInputChunk,
    };
  }

  destroy() {
    if (this.dCtxPtr) {
      this.zstdWASMModule._ZSTD_freeDStream(this.dCtxPtr);
      this.dCtxPtr = 0;
    }
    if (this.inputPtrWASMBuffer) {
      this.zstdWASMModule._free(this.inputPtrWASMBuffer);
      this.inputPtrWASMBuffer = 0;
    }
    if (this.outPtrWASMBuffer) {
      this.zstdWASMModule._free(this.outPtrWASMBuffer);
      this.outPtrWASMBuffer = 0;
    }
  }
}

async function example() {
  const zstd = await loadZstdModule();

  const decompressThenCompressThenVerify = (
    decompressor: ZSTDDecompressor,
    compressor: ZSTDCompressor,
    d: string,
    i: number
  ) => {
    const frame = hexStringToUint8Array(d);
    console.log(`Original Compressed size ${i + 1}: ${frame.length}`);

    const decompressedResult = decompressor.feed(frame);
    console.log(`Decompressed size ${i + 1}: ${decompressedResult.decompressedData.length}`);
    console.log(`Consumed bytes for decompression ${i + 1}: ${decompressedResult.consumed}`);

    const compressedResult = compressor.feed(decompressedResult.decompressedData);
    console.log(`Compressed size ${i + 1}: ${compressedResult.compressedData.length}`);
    console.log(`Consumed bytes for compression ${i + 1}: ${compressedResult.consumed}`);

    if (compressedResult.compressedData.length !== frame.length) {
      console.log("ERROR Lengths do not match");
      console.log(`Compressed size ${i + 1}: ${compressedResult.compressedData.length}`);
      console.log(`Original Compressed size ${i + 1}: ${frame.length}`);
      throw new Error("Compression failed: lengths do not match");
    }

    if (!compressedResult.compressedData.every((value, index) => value === frame[index])) {
      throw new Error("Compression failed: data mismatch");
    }
  };

  const processHexDump = async (hexDump: string[]) => {
    const compressor = new ZSTDCompressor(zstd);
    const decompressor = new ZSTDDecompressor(zstd);
    try {
      await Promise.all(hexDump.map((d, i) => 
        decompressThenCompressThenVerify(decompressor, compressor, d, i)
      ));
    } finally {
      decompressor.destroy();
      compressor.destroy();
    }
  };

  await processHexDump(hexDump0);
  await processHexDump(hexDump1);
}

example();
